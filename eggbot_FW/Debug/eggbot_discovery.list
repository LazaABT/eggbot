
eggbot_discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000371c  080001d0  080001d0  000101d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080038ec  080038ec  000138ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003924  08003924  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003924  08003924  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003924  08003924  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003924  08003924  00013924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003928  08003928  00013928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800392c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000010  0800393c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  0800393c  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a707  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a87  00000000  00000000  0002a740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  0002c1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  0002cdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010214  00000000  00000000  0002d930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c054  00000000  00000000  0003db44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00065b41  00000000  00000000  00049b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000af6d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033f8  00000000  00000000  000af72c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080038d4 	.word	0x080038d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	080038d4 	.word	0x080038d4

08000210 <__aeabi_dmul>:
 8000210:	b570      	push	{r4, r5, r6, lr}
 8000212:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000216:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800021a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800021e:	bf1d      	ittte	ne
 8000220:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000224:	ea94 0f0c 	teqne	r4, ip
 8000228:	ea95 0f0c 	teqne	r5, ip
 800022c:	f000 f8de 	bleq	80003ec <__aeabi_dmul+0x1dc>
 8000230:	442c      	add	r4, r5
 8000232:	ea81 0603 	eor.w	r6, r1, r3
 8000236:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800023a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800023e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000242:	bf18      	it	ne
 8000244:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000248:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800024c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000250:	d038      	beq.n	80002c4 <__aeabi_dmul+0xb4>
 8000252:	fba0 ce02 	umull	ip, lr, r0, r2
 8000256:	f04f 0500 	mov.w	r5, #0
 800025a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800025e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000262:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000266:	f04f 0600 	mov.w	r6, #0
 800026a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800026e:	f09c 0f00 	teq	ip, #0
 8000272:	bf18      	it	ne
 8000274:	f04e 0e01 	orrne.w	lr, lr, #1
 8000278:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800027c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000280:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000284:	d204      	bcs.n	8000290 <__aeabi_dmul+0x80>
 8000286:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800028a:	416d      	adcs	r5, r5
 800028c:	eb46 0606 	adc.w	r6, r6, r6
 8000290:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000294:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000298:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800029c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a8:	bf88      	it	hi
 80002aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002ae:	d81e      	bhi.n	80002ee <__aeabi_dmul+0xde>
 80002b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002b4:	bf08      	it	eq
 80002b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002ba:	f150 0000 	adcs.w	r0, r0, #0
 80002be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c8:	ea46 0101 	orr.w	r1, r6, r1
 80002cc:	ea40 0002 	orr.w	r0, r0, r2
 80002d0:	ea81 0103 	eor.w	r1, r1, r3
 80002d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d8:	bfc2      	ittt	gt
 80002da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	popgt	{r4, r5, r6, pc}
 80002e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e8:	f04f 0e00 	mov.w	lr, #0
 80002ec:	3c01      	subs	r4, #1
 80002ee:	f300 80ab 	bgt.w	8000448 <__aeabi_dmul+0x238>
 80002f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002f6:	bfde      	ittt	le
 80002f8:	2000      	movle	r0, #0
 80002fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002fe:	bd70      	pople	{r4, r5, r6, pc}
 8000300:	f1c4 0400 	rsb	r4, r4, #0
 8000304:	3c20      	subs	r4, #32
 8000306:	da35      	bge.n	8000374 <__aeabi_dmul+0x164>
 8000308:	340c      	adds	r4, #12
 800030a:	dc1b      	bgt.n	8000344 <__aeabi_dmul+0x134>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f305 	lsl.w	r3, r0, r5
 8000318:	fa20 f004 	lsr.w	r0, r0, r4
 800031c:	fa01 f205 	lsl.w	r2, r1, r5
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000328:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800032c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000330:	fa21 f604 	lsr.w	r6, r1, r4
 8000334:	eb42 0106 	adc.w	r1, r2, r6
 8000338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800033c:	bf08      	it	eq
 800033e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f1c4 040c 	rsb	r4, r4, #12
 8000348:	f1c4 0520 	rsb	r5, r4, #32
 800034c:	fa00 f304 	lsl.w	r3, r0, r4
 8000350:	fa20 f005 	lsr.w	r0, r0, r5
 8000354:	fa01 f204 	lsl.w	r2, r1, r4
 8000358:	ea40 0002 	orr.w	r0, r0, r2
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f1c4 0520 	rsb	r5, r4, #32
 8000378:	fa00 f205 	lsl.w	r2, r0, r5
 800037c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000380:	fa20 f304 	lsr.w	r3, r0, r4
 8000384:	fa01 f205 	lsl.w	r2, r1, r5
 8000388:	ea43 0302 	orr.w	r3, r3, r2
 800038c:	fa21 f004 	lsr.w	r0, r1, r4
 8000390:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000394:	fa21 f204 	lsr.w	r2, r1, r4
 8000398:	ea20 0002 	bic.w	r0, r0, r2
 800039c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003a4:	bf08      	it	eq
 80003a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003aa:	bd70      	pop	{r4, r5, r6, pc}
 80003ac:	f094 0f00 	teq	r4, #0
 80003b0:	d10f      	bne.n	80003d2 <__aeabi_dmul+0x1c2>
 80003b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003b6:	0040      	lsls	r0, r0, #1
 80003b8:	eb41 0101 	adc.w	r1, r1, r1
 80003bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c0:	bf08      	it	eq
 80003c2:	3c01      	subeq	r4, #1
 80003c4:	d0f7      	beq.n	80003b6 <__aeabi_dmul+0x1a6>
 80003c6:	ea41 0106 	orr.w	r1, r1, r6
 80003ca:	f095 0f00 	teq	r5, #0
 80003ce:	bf18      	it	ne
 80003d0:	4770      	bxne	lr
 80003d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003d6:	0052      	lsls	r2, r2, #1
 80003d8:	eb43 0303 	adc.w	r3, r3, r3
 80003dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3d01      	subeq	r5, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1c6>
 80003e6:	ea43 0306 	orr.w	r3, r3, r6
 80003ea:	4770      	bx	lr
 80003ec:	ea94 0f0c 	teq	r4, ip
 80003f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003f4:	bf18      	it	ne
 80003f6:	ea95 0f0c 	teqne	r5, ip
 80003fa:	d00c      	beq.n	8000416 <__aeabi_dmul+0x206>
 80003fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000400:	bf18      	it	ne
 8000402:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000406:	d1d1      	bne.n	80003ac <__aeabi_dmul+0x19c>
 8000408:	ea81 0103 	eor.w	r1, r1, r3
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	f04f 0000 	mov.w	r0, #0
 8000414:	bd70      	pop	{r4, r5, r6, pc}
 8000416:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800041a:	bf06      	itte	eq
 800041c:	4610      	moveq	r0, r2
 800041e:	4619      	moveq	r1, r3
 8000420:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000424:	d019      	beq.n	800045a <__aeabi_dmul+0x24a>
 8000426:	ea94 0f0c 	teq	r4, ip
 800042a:	d102      	bne.n	8000432 <__aeabi_dmul+0x222>
 800042c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000430:	d113      	bne.n	800045a <__aeabi_dmul+0x24a>
 8000432:	ea95 0f0c 	teq	r5, ip
 8000436:	d105      	bne.n	8000444 <__aeabi_dmul+0x234>
 8000438:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800043c:	bf1c      	itt	ne
 800043e:	4610      	movne	r0, r2
 8000440:	4619      	movne	r1, r3
 8000442:	d10a      	bne.n	800045a <__aeabi_dmul+0x24a>
 8000444:	ea81 0103 	eor.w	r1, r1, r3
 8000448:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800044c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd70      	pop	{r4, r5, r6, pc}
 800045a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800045e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000462:	bd70      	pop	{r4, r5, r6, pc}

08000464 <__aeabi_drsub>:
 8000464:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e002      	b.n	8000470 <__adddf3>
 800046a:	bf00      	nop

0800046c <__aeabi_dsub>:
 800046c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000470 <__adddf3>:
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000476:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800047a:	ea94 0f05 	teq	r4, r5
 800047e:	bf08      	it	eq
 8000480:	ea90 0f02 	teqeq	r0, r2
 8000484:	bf1f      	itttt	ne
 8000486:	ea54 0c00 	orrsne.w	ip, r4, r0
 800048a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800048e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000492:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000496:	f000 80e2 	beq.w	800065e <__adddf3+0x1ee>
 800049a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800049e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004a2:	bfb8      	it	lt
 80004a4:	426d      	neglt	r5, r5
 80004a6:	dd0c      	ble.n	80004c2 <__adddf3+0x52>
 80004a8:	442c      	add	r4, r5
 80004aa:	ea80 0202 	eor.w	r2, r0, r2
 80004ae:	ea81 0303 	eor.w	r3, r1, r3
 80004b2:	ea82 0000 	eor.w	r0, r2, r0
 80004b6:	ea83 0101 	eor.w	r1, r3, r1
 80004ba:	ea80 0202 	eor.w	r2, r0, r2
 80004be:	ea81 0303 	eor.w	r3, r1, r3
 80004c2:	2d36      	cmp	r5, #54	; 0x36
 80004c4:	bf88      	it	hi
 80004c6:	bd30      	pophi	{r4, r5, pc}
 80004c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d8:	d002      	beq.n	80004e0 <__adddf3+0x70>
 80004da:	4240      	negs	r0, r0
 80004dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ec:	d002      	beq.n	80004f4 <__adddf3+0x84>
 80004ee:	4252      	negs	r2, r2
 80004f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004f4:	ea94 0f05 	teq	r4, r5
 80004f8:	f000 80a7 	beq.w	800064a <__adddf3+0x1da>
 80004fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000500:	f1d5 0e20 	rsbs	lr, r5, #32
 8000504:	db0d      	blt.n	8000522 <__adddf3+0xb2>
 8000506:	fa02 fc0e 	lsl.w	ip, r2, lr
 800050a:	fa22 f205 	lsr.w	r2, r2, r5
 800050e:	1880      	adds	r0, r0, r2
 8000510:	f141 0100 	adc.w	r1, r1, #0
 8000514:	fa03 f20e 	lsl.w	r2, r3, lr
 8000518:	1880      	adds	r0, r0, r2
 800051a:	fa43 f305 	asr.w	r3, r3, r5
 800051e:	4159      	adcs	r1, r3
 8000520:	e00e      	b.n	8000540 <__adddf3+0xd0>
 8000522:	f1a5 0520 	sub.w	r5, r5, #32
 8000526:	f10e 0e20 	add.w	lr, lr, #32
 800052a:	2a01      	cmp	r2, #1
 800052c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000530:	bf28      	it	cs
 8000532:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000536:	fa43 f305 	asr.w	r3, r3, r5
 800053a:	18c0      	adds	r0, r0, r3
 800053c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	d507      	bpl.n	8000556 <__adddf3+0xe6>
 8000546:	f04f 0e00 	mov.w	lr, #0
 800054a:	f1dc 0c00 	rsbs	ip, ip, #0
 800054e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000552:	eb6e 0101 	sbc.w	r1, lr, r1
 8000556:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800055a:	d31b      	bcc.n	8000594 <__adddf3+0x124>
 800055c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000560:	d30c      	bcc.n	800057c <__adddf3+0x10c>
 8000562:	0849      	lsrs	r1, r1, #1
 8000564:	ea5f 0030 	movs.w	r0, r0, rrx
 8000568:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800056c:	f104 0401 	add.w	r4, r4, #1
 8000570:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000574:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000578:	f080 809a 	bcs.w	80006b0 <__adddf3+0x240>
 800057c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000580:	bf08      	it	eq
 8000582:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000586:	f150 0000 	adcs.w	r0, r0, #0
 800058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058e:	ea41 0105 	orr.w	r1, r1, r5
 8000592:	bd30      	pop	{r4, r5, pc}
 8000594:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000598:	4140      	adcs	r0, r0
 800059a:	eb41 0101 	adc.w	r1, r1, r1
 800059e:	3c01      	subs	r4, #1
 80005a0:	bf28      	it	cs
 80005a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005a6:	d2e9      	bcs.n	800057c <__adddf3+0x10c>
 80005a8:	f091 0f00 	teq	r1, #0
 80005ac:	bf04      	itt	eq
 80005ae:	4601      	moveq	r1, r0
 80005b0:	2000      	moveq	r0, #0
 80005b2:	fab1 f381 	clz	r3, r1
 80005b6:	bf08      	it	eq
 80005b8:	3320      	addeq	r3, #32
 80005ba:	f1a3 030b 	sub.w	r3, r3, #11
 80005be:	f1b3 0220 	subs.w	r2, r3, #32
 80005c2:	da0c      	bge.n	80005de <__adddf3+0x16e>
 80005c4:	320c      	adds	r2, #12
 80005c6:	dd08      	ble.n	80005da <__adddf3+0x16a>
 80005c8:	f102 0c14 	add.w	ip, r2, #20
 80005cc:	f1c2 020c 	rsb	r2, r2, #12
 80005d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005d4:	fa21 f102 	lsr.w	r1, r1, r2
 80005d8:	e00c      	b.n	80005f4 <__adddf3+0x184>
 80005da:	f102 0214 	add.w	r2, r2, #20
 80005de:	bfd8      	it	le
 80005e0:	f1c2 0c20 	rsble	ip, r2, #32
 80005e4:	fa01 f102 	lsl.w	r1, r1, r2
 80005e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ec:	bfdc      	itt	le
 80005ee:	ea41 010c 	orrle.w	r1, r1, ip
 80005f2:	4090      	lslle	r0, r2
 80005f4:	1ae4      	subs	r4, r4, r3
 80005f6:	bfa2      	ittt	ge
 80005f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005fc:	4329      	orrge	r1, r5
 80005fe:	bd30      	popge	{r4, r5, pc}
 8000600:	ea6f 0404 	mvn.w	r4, r4
 8000604:	3c1f      	subs	r4, #31
 8000606:	da1c      	bge.n	8000642 <__adddf3+0x1d2>
 8000608:	340c      	adds	r4, #12
 800060a:	dc0e      	bgt.n	800062a <__adddf3+0x1ba>
 800060c:	f104 0414 	add.w	r4, r4, #20
 8000610:	f1c4 0220 	rsb	r2, r4, #32
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f302 	lsl.w	r3, r1, r2
 800061c:	ea40 0003 	orr.w	r0, r0, r3
 8000620:	fa21 f304 	lsr.w	r3, r1, r4
 8000624:	ea45 0103 	orr.w	r1, r5, r3
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	f1c4 040c 	rsb	r4, r4, #12
 800062e:	f1c4 0220 	rsb	r2, r4, #32
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 f304 	lsl.w	r3, r1, r4
 800063a:	ea40 0003 	orr.w	r0, r0, r3
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	fa21 f004 	lsr.w	r0, r1, r4
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f094 0f00 	teq	r4, #0
 800064e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000652:	bf06      	itte	eq
 8000654:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000658:	3401      	addeq	r4, #1
 800065a:	3d01      	subne	r5, #1
 800065c:	e74e      	b.n	80004fc <__adddf3+0x8c>
 800065e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000662:	bf18      	it	ne
 8000664:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000668:	d029      	beq.n	80006be <__adddf3+0x24e>
 800066a:	ea94 0f05 	teq	r4, r5
 800066e:	bf08      	it	eq
 8000670:	ea90 0f02 	teqeq	r0, r2
 8000674:	d005      	beq.n	8000682 <__adddf3+0x212>
 8000676:	ea54 0c00 	orrs.w	ip, r4, r0
 800067a:	bf04      	itt	eq
 800067c:	4619      	moveq	r1, r3
 800067e:	4610      	moveq	r0, r2
 8000680:	bd30      	pop	{r4, r5, pc}
 8000682:	ea91 0f03 	teq	r1, r3
 8000686:	bf1e      	ittt	ne
 8000688:	2100      	movne	r1, #0
 800068a:	2000      	movne	r0, #0
 800068c:	bd30      	popne	{r4, r5, pc}
 800068e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000692:	d105      	bne.n	80006a0 <__adddf3+0x230>
 8000694:	0040      	lsls	r0, r0, #1
 8000696:	4149      	adcs	r1, r1
 8000698:	bf28      	it	cs
 800069a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd30      	pop	{r4, r5, pc}
 80006a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006a4:	bf3c      	itt	cc
 80006a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006aa:	bd30      	popcc	{r4, r5, pc}
 80006ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b8:	f04f 0000 	mov.w	r0, #0
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf1a      	itte	ne
 80006c4:	4619      	movne	r1, r3
 80006c6:	4610      	movne	r0, r2
 80006c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006cc:	bf1c      	itt	ne
 80006ce:	460b      	movne	r3, r1
 80006d0:	4602      	movne	r2, r0
 80006d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006d6:	bf06      	itte	eq
 80006d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006dc:	ea91 0f03 	teqeq	r1, r3
 80006e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	bf00      	nop

080006e8 <__aeabi_ui2d>:
 80006e8:	f090 0f00 	teq	r0, #0
 80006ec:	bf04      	itt	eq
 80006ee:	2100      	moveq	r1, #0
 80006f0:	4770      	bxeq	lr
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fc:	f04f 0500 	mov.w	r5, #0
 8000700:	f04f 0100 	mov.w	r1, #0
 8000704:	e750      	b.n	80005a8 <__adddf3+0x138>
 8000706:	bf00      	nop

08000708 <__aeabi_i2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000720:	bf48      	it	mi
 8000722:	4240      	negmi	r0, r0
 8000724:	f04f 0100 	mov.w	r1, #0
 8000728:	e73e      	b.n	80005a8 <__adddf3+0x138>
 800072a:	bf00      	nop

0800072c <__aeabi_f2d>:
 800072c:	0042      	lsls	r2, r0, #1
 800072e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000732:	ea4f 0131 	mov.w	r1, r1, rrx
 8000736:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800073a:	bf1f      	itttt	ne
 800073c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000740:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000744:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000748:	4770      	bxne	lr
 800074a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800074e:	bf08      	it	eq
 8000750:	4770      	bxeq	lr
 8000752:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000756:	bf04      	itt	eq
 8000758:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800075c:	4770      	bxeq	lr
 800075e:	b530      	push	{r4, r5, lr}
 8000760:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000764:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800076c:	e71c      	b.n	80005a8 <__adddf3+0x138>
 800076e:	bf00      	nop

08000770 <__aeabi_ul2d>:
 8000770:	ea50 0201 	orrs.w	r2, r0, r1
 8000774:	bf08      	it	eq
 8000776:	4770      	bxeq	lr
 8000778:	b530      	push	{r4, r5, lr}
 800077a:	f04f 0500 	mov.w	r5, #0
 800077e:	e00a      	b.n	8000796 <__aeabi_l2d+0x16>

08000780 <__aeabi_l2d>:
 8000780:	ea50 0201 	orrs.w	r2, r0, r1
 8000784:	bf08      	it	eq
 8000786:	4770      	bxeq	lr
 8000788:	b530      	push	{r4, r5, lr}
 800078a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800078e:	d502      	bpl.n	8000796 <__aeabi_l2d+0x16>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800079a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007a2:	f43f aed8 	beq.w	8000556 <__adddf3+0xe6>
 80007a6:	f04f 0203 	mov.w	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007be:	f1c2 0320 	rsb	r3, r2, #32
 80007c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007c6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ce:	ea40 000e 	orr.w	r0, r0, lr
 80007d2:	fa21 f102 	lsr.w	r1, r1, r2
 80007d6:	4414      	add	r4, r2
 80007d8:	e6bd      	b.n	8000556 <__adddf3+0xe6>
 80007da:	bf00      	nop

080007dc <__gedf2>:
 80007dc:	f04f 3cff 	mov.w	ip, #4294967295
 80007e0:	e006      	b.n	80007f0 <__cmpdf2+0x4>
 80007e2:	bf00      	nop

080007e4 <__ledf2>:
 80007e4:	f04f 0c01 	mov.w	ip, #1
 80007e8:	e002      	b.n	80007f0 <__cmpdf2+0x4>
 80007ea:	bf00      	nop

080007ec <__cmpdf2>:
 80007ec:	f04f 0c01 	mov.w	ip, #1
 80007f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000806:	d01b      	beq.n	8000840 <__cmpdf2+0x54>
 8000808:	b001      	add	sp, #4
 800080a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800080e:	bf0c      	ite	eq
 8000810:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000814:	ea91 0f03 	teqne	r1, r3
 8000818:	bf02      	ittt	eq
 800081a:	ea90 0f02 	teqeq	r0, r2
 800081e:	2000      	moveq	r0, #0
 8000820:	4770      	bxeq	lr
 8000822:	f110 0f00 	cmn.w	r0, #0
 8000826:	ea91 0f03 	teq	r1, r3
 800082a:	bf58      	it	pl
 800082c:	4299      	cmppl	r1, r3
 800082e:	bf08      	it	eq
 8000830:	4290      	cmpeq	r0, r2
 8000832:	bf2c      	ite	cs
 8000834:	17d8      	asrcs	r0, r3, #31
 8000836:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800083a:	f040 0001 	orr.w	r0, r0, #1
 800083e:	4770      	bx	lr
 8000840:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000844:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000848:	d102      	bne.n	8000850 <__cmpdf2+0x64>
 800084a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800084e:	d107      	bne.n	8000860 <__cmpdf2+0x74>
 8000850:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000858:	d1d6      	bne.n	8000808 <__cmpdf2+0x1c>
 800085a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800085e:	d0d3      	beq.n	8000808 <__cmpdf2+0x1c>
 8000860:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop

08000868 <__aeabi_cdrcmple>:
 8000868:	4684      	mov	ip, r0
 800086a:	4610      	mov	r0, r2
 800086c:	4662      	mov	r2, ip
 800086e:	468c      	mov	ip, r1
 8000870:	4619      	mov	r1, r3
 8000872:	4663      	mov	r3, ip
 8000874:	e000      	b.n	8000878 <__aeabi_cdcmpeq>
 8000876:	bf00      	nop

08000878 <__aeabi_cdcmpeq>:
 8000878:	b501      	push	{r0, lr}
 800087a:	f7ff ffb7 	bl	80007ec <__cmpdf2>
 800087e:	2800      	cmp	r0, #0
 8000880:	bf48      	it	mi
 8000882:	f110 0f00 	cmnmi.w	r0, #0
 8000886:	bd01      	pop	{r0, pc}

08000888 <__aeabi_dcmpeq>:
 8000888:	f84d ed08 	str.w	lr, [sp, #-8]!
 800088c:	f7ff fff4 	bl	8000878 <__aeabi_cdcmpeq>
 8000890:	bf0c      	ite	eq
 8000892:	2001      	moveq	r0, #1
 8000894:	2000      	movne	r0, #0
 8000896:	f85d fb08 	ldr.w	pc, [sp], #8
 800089a:	bf00      	nop

0800089c <__aeabi_dcmplt>:
 800089c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a0:	f7ff ffea 	bl	8000878 <__aeabi_cdcmpeq>
 80008a4:	bf34      	ite	cc
 80008a6:	2001      	movcc	r0, #1
 80008a8:	2000      	movcs	r0, #0
 80008aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ae:	bf00      	nop

080008b0 <__aeabi_dcmple>:
 80008b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008b4:	f7ff ffe0 	bl	8000878 <__aeabi_cdcmpeq>
 80008b8:	bf94      	ite	ls
 80008ba:	2001      	movls	r0, #1
 80008bc:	2000      	movhi	r0, #0
 80008be:	f85d fb08 	ldr.w	pc, [sp], #8
 80008c2:	bf00      	nop

080008c4 <__aeabi_dcmpge>:
 80008c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008c8:	f7ff ffce 	bl	8000868 <__aeabi_cdrcmple>
 80008cc:	bf94      	ite	ls
 80008ce:	2001      	movls	r0, #1
 80008d0:	2000      	movhi	r0, #0
 80008d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008d6:	bf00      	nop

080008d8 <__aeabi_dcmpgt>:
 80008d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008dc:	f7ff ffc4 	bl	8000868 <__aeabi_cdrcmple>
 80008e0:	bf34      	ite	cc
 80008e2:	2001      	movcc	r0, #1
 80008e4:	2000      	movcs	r0, #0
 80008e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ea:	bf00      	nop

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	0000      	movs	r0, r0
	...

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000946:	f000 fd44 	bl	80013d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094a:	f000 f86f 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094e:	f000 fa65 	bl	8000e1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000952:	f000 fa3d 	bl	8000dd0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000956:	f000 fa11 	bl	8000d7c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800095a:	f000 f8a9 	bl	8000ab0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800095e:	f000 f91d 	bl	8000b9c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000962:	f000 f993 	bl	8000c8c <MX_TIM4_Init>
  /* USER CODE BEGIN WHILE */

//  volatile HAL_StatusTypeDef tmp = HAL_TIM_Base_Start(&htim2);


  double pos = -0.5;
 8000966:	f04f 0200 	mov.w	r2, #0
 800096a:	4b2b      	ldr	r3, [pc, #172]	; (8000a18 <main+0xd8>)
 800096c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  int posidx = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 8000974:	2100      	movs	r1, #0
 8000976:	4829      	ldr	r0, [pc, #164]	; (8000a1c <main+0xdc>)
 8000978:	f001 fe46 	bl	8002608 <HAL_TIM_PWM_Start_IT>

  while (1)
  {


	  HAL_Delay(1);
 800097c:	2001      	movs	r0, #1
 800097e:	f000 fd81 	bl	8001484 <HAL_Delay>
//	  if (HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin))
//	  {
		  count = 0;
 8000982:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <main+0xe0>)
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
		  count3 = 0;
 8000988:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <main+0xe4>)
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
		  htim4.Instance->CCR1 = (int)(pos * 3000.0 + 3000.0)-1;
 800098e:	a31c      	add	r3, pc, #112	; (adr r3, 8000a00 <main+0xc0>)
 8000990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000994:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000998:	f7ff fc3a 	bl	8000210 <__aeabi_dmul>
 800099c:	4602      	mov	r2, r0
 800099e:	460b      	mov	r3, r1
 80009a0:	4610      	mov	r0, r2
 80009a2:	4619      	mov	r1, r3
 80009a4:	a316      	add	r3, pc, #88	; (adr r3, 8000a00 <main+0xc0>)
 80009a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009aa:	f7ff fd61 	bl	8000470 <__adddf3>
 80009ae:	4602      	mov	r2, r0
 80009b0:	460b      	mov	r3, r1
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	f7ff ff99 	bl	80008ec <__aeabi_d2iz>
 80009ba:	4603      	mov	r3, r0
 80009bc:	1e5a      	subs	r2, r3, #1
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <main+0xdc>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	635a      	str	r2, [r3, #52]	; 0x34
		  pos = pos + 0.02;
 80009c4:	a310      	add	r3, pc, #64	; (adr r3, 8000a08 <main+0xc8>)
 80009c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80009ce:	f7ff fd4f 	bl	8000470 <__adddf3>
 80009d2:	4602      	mov	r2, r0
 80009d4:	460b      	mov	r3, r1
 80009d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
		  if (pos > 1.5)
 80009da:	f04f 0200 	mov.w	r2, #0
 80009de:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <main+0xe8>)
 80009e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80009e4:	f7ff ff78 	bl	80008d8 <__aeabi_dcmpgt>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d004      	beq.n	80009f8 <main+0xb8>
			  pos = -0.6;
 80009ee:	a308      	add	r3, pc, #32	; (adr r3, 8000a10 <main+0xd0>)
 80009f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
//		  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
//		  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
		  HAL_Delay(100);
 80009f8:	2064      	movs	r0, #100	; 0x64
 80009fa:	f000 fd43 	bl	8001484 <HAL_Delay>
	  HAL_Delay(1);
 80009fe:	e7bd      	b.n	800097c <main+0x3c>
 8000a00:	00000000 	.word	0x00000000
 8000a04:	40a77000 	.word	0x40a77000
 8000a08:	47ae147b 	.word	0x47ae147b
 8000a0c:	3f947ae1 	.word	0x3f947ae1
 8000a10:	33333333 	.word	0x33333333
 8000a14:	bfe33333 	.word	0xbfe33333
 8000a18:	bfe00000 	.word	0xbfe00000
 8000a1c:	200000bc 	.word	0x200000bc
 8000a20:	20000000 	.word	0x20000000
 8000a24:	200001d0 	.word	0x200001d0
 8000a28:	3ff80000 	.word	0x3ff80000

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b090      	sub	sp, #64	; 0x40
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0318 	add.w	r3, r7, #24
 8000a36:	2228      	movs	r2, #40	; 0x28
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 ff42 	bl	80038c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000a66:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6c:	f107 0318 	add.w	r3, r7, #24
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 f935 	bl	8001ce0 <HAL_RCC_OscConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000a7c:	f000 fa7a 	bl	8000f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a80:	230f      	movs	r3, #15
 8000a82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a84:	2302      	movs	r3, #2
 8000a86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 fba3 	bl	80021e4 <HAL_RCC_ClockConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000aa4:	f000 fa66 	bl	8000f74 <Error_Handler>
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	3740      	adds	r7, #64	; 0x40
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08e      	sub	sp, #56	; 0x38
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac4:	f107 0320 	add.w	r3, r7, #32
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
 8000adc:	615a      	str	r2, [r3, #20]
 8000ade:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ae0:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <MX_TIM2_Init+0xe8>)
 8000ae2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ae6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ae8:	4b2b      	ldr	r3, [pc, #172]	; (8000b98 <MX_TIM2_Init+0xe8>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aee:	4b2a      	ldr	r3, [pc, #168]	; (8000b98 <MX_TIM2_Init+0xe8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8000af4:	4b28      	ldr	r3, [pc, #160]	; (8000b98 <MX_TIM2_Init+0xe8>)
 8000af6:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000afa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000afc:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <MX_TIM2_Init+0xe8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b02:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <MX_TIM2_Init+0xe8>)
 8000b04:	2280      	movs	r2, #128	; 0x80
 8000b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b08:	4823      	ldr	r0, [pc, #140]	; (8000b98 <MX_TIM2_Init+0xe8>)
 8000b0a:	f001 fcd5 	bl	80024b8 <HAL_TIM_Base_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b14:	f000 fa2e 	bl	8000f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b22:	4619      	mov	r1, r3
 8000b24:	481c      	ldr	r0, [pc, #112]	; (8000b98 <MX_TIM2_Init+0xe8>)
 8000b26:	f002 f901 	bl	8002d2c <HAL_TIM_ConfigClockSource>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000b30:	f000 fa20 	bl	8000f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b34:	4818      	ldr	r0, [pc, #96]	; (8000b98 <MX_TIM2_Init+0xe8>)
 8000b36:	f001 fd0e 	bl	8002556 <HAL_TIM_PWM_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000b40:	f000 fa18 	bl	8000f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b4c:	f107 0320 	add.w	r3, r7, #32
 8000b50:	4619      	mov	r1, r3
 8000b52:	4811      	ldr	r0, [pc, #68]	; (8000b98 <MX_TIM2_Init+0xe8>)
 8000b54:	f002 fce8 	bl	8003528 <HAL_TIMEx_MasterConfigSynchronization>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000b5e:	f000 fa09 	bl	8000f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b62:	2360      	movs	r3, #96	; 0x60
 8000b64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 29999;
 8000b66:	f247 532f 	movw	r3, #29999	; 0x752f
 8000b6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2200      	movs	r2, #0
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4807      	ldr	r0, [pc, #28]	; (8000b98 <MX_TIM2_Init+0xe8>)
 8000b7c:	f002 f818 	bl	8002bb0 <HAL_TIM_PWM_ConfigChannel>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b86:	f000 f9f5 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b8a:	4803      	ldr	r0, [pc, #12]	; (8000b98 <MX_TIM2_Init+0xe8>)
 8000b8c:	f000 fa7e 	bl	800108c <HAL_TIM_MspPostInit>

}
 8000b90:	bf00      	nop
 8000b92:	3738      	adds	r7, #56	; 0x38
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	2000002c 	.word	0x2000002c

08000b9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08e      	sub	sp, #56	; 0x38
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb0:	f107 0320 	add.w	r3, r7, #32
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
 8000bc8:	615a      	str	r2, [r3, #20]
 8000bca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bcc:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <MX_TIM3_Init+0xe8>)
 8000bce:	4a2e      	ldr	r2, [pc, #184]	; (8000c88 <MX_TIM3_Init+0xec>)
 8000bd0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <MX_TIM3_Init+0xe8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd8:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <MX_TIM3_Init+0xe8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 29999;
 8000bde:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <MX_TIM3_Init+0xe8>)
 8000be0:	f247 522f 	movw	r2, #29999	; 0x752f
 8000be4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be6:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <MX_TIM3_Init+0xe8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bec:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <MX_TIM3_Init+0xe8>)
 8000bee:	2280      	movs	r2, #128	; 0x80
 8000bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bf2:	4824      	ldr	r0, [pc, #144]	; (8000c84 <MX_TIM3_Init+0xe8>)
 8000bf4:	f001 fc60 	bl	80024b8 <HAL_TIM_Base_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000bfe:	f000 f9b9 	bl	8000f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	481d      	ldr	r0, [pc, #116]	; (8000c84 <MX_TIM3_Init+0xe8>)
 8000c10:	f002 f88c 	bl	8002d2c <HAL_TIM_ConfigClockSource>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c1a:	f000 f9ab 	bl	8000f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c1e:	4819      	ldr	r0, [pc, #100]	; (8000c84 <MX_TIM3_Init+0xe8>)
 8000c20:	f001 fc99 	bl	8002556 <HAL_TIM_PWM_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c2a:	f000 f9a3 	bl	8000f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c36:	f107 0320 	add.w	r3, r7, #32
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4811      	ldr	r0, [pc, #68]	; (8000c84 <MX_TIM3_Init+0xe8>)
 8000c3e:	f002 fc73 	bl	8003528 <HAL_TIMEx_MasterConfigSynchronization>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c48:	f000 f994 	bl	8000f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c4c:	2360      	movs	r3, #96	; 0x60
 8000c4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2999;
 8000c50:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8000c54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	4619      	mov	r1, r3
 8000c64:	4807      	ldr	r0, [pc, #28]	; (8000c84 <MX_TIM3_Init+0xe8>)
 8000c66:	f001 ffa3 	bl	8002bb0 <HAL_TIM_PWM_ConfigChannel>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c70:	f000 f980 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c74:	4803      	ldr	r0, [pc, #12]	; (8000c84 <MX_TIM3_Init+0xe8>)
 8000c76:	f000 fa09 	bl	800108c <HAL_TIM_MspPostInit>

}
 8000c7a:	bf00      	nop
 8000c7c:	3738      	adds	r7, #56	; 0x38
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000074 	.word	0x20000074
 8000c88:	40000400 	.word	0x40000400

08000c8c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08e      	sub	sp, #56	; 0x38
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca0:	f107 0320 	add.w	r3, r7, #32
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
 8000cb8:	615a      	str	r2, [r3, #20]
 8000cba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cbc:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <MX_TIM4_Init+0xe8>)
 8000cbe:	4a2e      	ldr	r2, [pc, #184]	; (8000d78 <MX_TIM4_Init+0xec>)
 8000cc0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8000cc2:	4b2c      	ldr	r3, [pc, #176]	; (8000d74 <MX_TIM4_Init+0xe8>)
 8000cc4:	2207      	movs	r2, #7
 8000cc6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc8:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <MX_TIM4_Init+0xe8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8000cce:	4b29      	ldr	r3, [pc, #164]	; (8000d74 <MX_TIM4_Init+0xe8>)
 8000cd0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000cd4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd6:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <MX_TIM4_Init+0xe8>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cdc:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <MX_TIM4_Init+0xe8>)
 8000cde:	2280      	movs	r2, #128	; 0x80
 8000ce0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ce2:	4824      	ldr	r0, [pc, #144]	; (8000d74 <MX_TIM4_Init+0xe8>)
 8000ce4:	f001 fbe8 	bl	80024b8 <HAL_TIM_Base_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000cee:	f000 f941 	bl	8000f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	481d      	ldr	r0, [pc, #116]	; (8000d74 <MX_TIM4_Init+0xe8>)
 8000d00:	f002 f814 	bl	8002d2c <HAL_TIM_ConfigClockSource>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000d0a:	f000 f933 	bl	8000f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d0e:	4819      	ldr	r0, [pc, #100]	; (8000d74 <MX_TIM4_Init+0xe8>)
 8000d10:	f001 fc21 	bl	8002556 <HAL_TIM_PWM_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000d1a:	f000 f92b 	bl	8000f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d26:	f107 0320 	add.w	r3, r7, #32
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4811      	ldr	r0, [pc, #68]	; (8000d74 <MX_TIM4_Init+0xe8>)
 8000d2e:	f002 fbfb 	bl	8003528 <HAL_TIMEx_MasterConfigSynchronization>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000d38:	f000 f91c 	bl	8000f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d3c:	2360      	movs	r3, #96	; 0x60
 8000d3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2999;
 8000d40:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8000d44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2200      	movs	r2, #0
 8000d52:	4619      	mov	r1, r3
 8000d54:	4807      	ldr	r0, [pc, #28]	; (8000d74 <MX_TIM4_Init+0xe8>)
 8000d56:	f001 ff2b 	bl	8002bb0 <HAL_TIM_PWM_ConfigChannel>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000d60:	f000 f908 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d64:	4803      	ldr	r0, [pc, #12]	; (8000d74 <MX_TIM4_Init+0xe8>)
 8000d66:	f000 f991 	bl	800108c <HAL_TIM_MspPostInit>

}
 8000d6a:	bf00      	nop
 8000d6c:	3738      	adds	r7, #56	; 0x38
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200000bc 	.word	0x200000bc
 8000d78:	40000800 	.word	0x40000800

08000d7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_USART1_UART_Init+0x4c>)
 8000d82:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <MX_USART1_UART_Init+0x50>)
 8000d84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <MX_USART1_UART_Init+0x4c>)
 8000d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_USART1_UART_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_USART1_UART_Init+0x4c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <MX_USART1_UART_Init+0x4c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_USART1_UART_Init+0x4c>)
 8000da2:	220c      	movs	r2, #12
 8000da4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <MX_USART1_UART_Init+0x4c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_USART1_UART_Init+0x4c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_USART1_UART_Init+0x4c>)
 8000db4:	f002 fc30 	bl	8003618 <HAL_UART_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dbe:	f000 f8d9 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000104 	.word	0x20000104
 8000dcc:	40013800 	.word	0x40013800

08000dd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <MX_DMA_Init+0x48>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	4a0f      	ldr	r2, [pc, #60]	; (8000e18 <MX_DMA_Init+0x48>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6153      	str	r3, [r2, #20]
 8000de2:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <MX_DMA_Init+0x48>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	200e      	movs	r0, #14
 8000df4:	f000 fc41 	bl	800167a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000df8:	200e      	movs	r0, #14
 8000dfa:	f000 fc5a 	bl	80016b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	200f      	movs	r0, #15
 8000e04:	f000 fc39 	bl	800167a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000e08:	200f      	movs	r0, #15
 8000e0a:	f000 fc52 	bl	80016b2 <HAL_NVIC_EnableIRQ>

}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000

08000e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e30:	4b33      	ldr	r3, [pc, #204]	; (8000f00 <MX_GPIO_Init+0xe4>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a32      	ldr	r2, [pc, #200]	; (8000f00 <MX_GPIO_Init+0xe4>)
 8000e36:	f043 0320 	orr.w	r3, r3, #32
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b30      	ldr	r3, [pc, #192]	; (8000f00 <MX_GPIO_Init+0xe4>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0320 	and.w	r3, r3, #32
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e48:	4b2d      	ldr	r3, [pc, #180]	; (8000f00 <MX_GPIO_Init+0xe4>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a2c      	ldr	r2, [pc, #176]	; (8000f00 <MX_GPIO_Init+0xe4>)
 8000e4e:	f043 0304 	orr.w	r3, r3, #4
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <MX_GPIO_Init+0xe4>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0304 	and.w	r3, r3, #4
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e60:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <MX_GPIO_Init+0xe4>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a26      	ldr	r2, [pc, #152]	; (8000f00 <MX_GPIO_Init+0xe4>)
 8000e66:	f043 0310 	orr.w	r3, r3, #16
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <MX_GPIO_Init+0xe4>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0310 	and.w	r3, r3, #16
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e78:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <MX_GPIO_Init+0xe4>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a20      	ldr	r2, [pc, #128]	; (8000f00 <MX_GPIO_Init+0xe4>)
 8000e7e:	f043 0308 	orr.w	r3, r3, #8
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <MX_GPIO_Init+0xe4>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0308 	and.w	r3, r3, #8
 8000e8c:	603b      	str	r3, [r7, #0]
 8000e8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2180      	movs	r1, #128	; 0x80
 8000e94:	481b      	ldr	r0, [pc, #108]	; (8000f04 <MX_GPIO_Init+0xe8>)
 8000e96:	f000 ff0b 	bl	8001cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD1_Pin|LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000ea0:	4819      	ldr	r0, [pc, #100]	; (8000f08 <MX_GPIO_Init+0xec>)
 8000ea2:	f000 ff05 	bl	8001cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4812      	ldr	r0, [pc, #72]	; (8000f04 <MX_GPIO_Init+0xe8>)
 8000eba:	f000 fd75 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	480b      	ldr	r0, [pc, #44]	; (8000f04 <MX_GPIO_Init+0xe8>)
 8000ed6:	f000 fd67 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin PC10 */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|GPIO_PIN_10;
 8000eda:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000ede:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <MX_GPIO_Init+0xec>)
 8000ef4:	f000 fd58 	bl	80019a8 <HAL_GPIO_Init>

}
 8000ef8:	bf00      	nop
 8000efa:	3720      	adds	r7, #32
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40010800 	.word	0x40010800
 8000f08:	40011000 	.word	0x40011000

08000f0c <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  if (htim == &htim2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a13      	ldr	r2, [pc, #76]	; (8000f64 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d10d      	bne.n	8000f38 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
	{
	  count ++;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	3301      	adds	r3, #1
 8000f22:	4a11      	ldr	r2, [pc, #68]	; (8000f68 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 8000f24:	6013      	str	r3, [r2, #0]
	  if (count >= 8)
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b07      	cmp	r3, #7
 8000f2c:	dd15      	ble.n	8000f5a <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
	  {
		  HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_1);
 8000f2e:	2100      	movs	r1, #0
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f001 fc71 	bl	8002818 <HAL_TIM_PWM_Stop_IT>
	  {
		  HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_1);
	  }
	}

}
 8000f36:	e010      	b.n	8000f5a <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
  else if (htim == &htim3)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a0c      	ldr	r2, [pc, #48]	; (8000f6c <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d10c      	bne.n	8000f5a <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
	  count3 ++;
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8000f48:	6013      	str	r3, [r2, #0]
	  if (count3 >= 12)
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b0b      	cmp	r3, #11
 8000f50:	dd03      	ble.n	8000f5a <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
		  HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_1);
 8000f52:	2100      	movs	r1, #0
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f001 fc5f 	bl	8002818 <HAL_TIM_PWM_Stop_IT>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000002c 	.word	0x2000002c
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	20000074 	.word	0x20000074
 8000f70:	200001d0 	.word	0x200001d0

08000f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f78:	b672      	cpsid	i
}
 8000f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <Error_Handler+0x8>
	...

08000f80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <HAL_MspInit+0x5c>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <HAL_MspInit+0x5c>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6193      	str	r3, [r2, #24]
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_MspInit+0x5c>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <HAL_MspInit+0x5c>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <HAL_MspInit+0x5c>)
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	61d3      	str	r3, [r2, #28]
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <HAL_MspInit+0x5c>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_MspInit+0x60>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <HAL_MspInit+0x60>)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40010000 	.word	0x40010000

08000fe4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff4:	d114      	bne.n	8001020 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ff6:	4b22      	ldr	r3, [pc, #136]	; (8001080 <HAL_TIM_Base_MspInit+0x9c>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	4a21      	ldr	r2, [pc, #132]	; (8001080 <HAL_TIM_Base_MspInit+0x9c>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	61d3      	str	r3, [r2, #28]
 8001002:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <HAL_TIM_Base_MspInit+0x9c>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	201c      	movs	r0, #28
 8001014:	f000 fb31 	bl	800167a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001018:	201c      	movs	r0, #28
 800101a:	f000 fb4a 	bl	80016b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800101e:	e02a      	b.n	8001076 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a17      	ldr	r2, [pc, #92]	; (8001084 <HAL_TIM_Base_MspInit+0xa0>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d114      	bne.n	8001054 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <HAL_TIM_Base_MspInit+0x9c>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	4a14      	ldr	r2, [pc, #80]	; (8001080 <HAL_TIM_Base_MspInit+0x9c>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	61d3      	str	r3, [r2, #28]
 8001036:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_TIM_Base_MspInit+0x9c>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	201d      	movs	r0, #29
 8001048:	f000 fb17 	bl	800167a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800104c:	201d      	movs	r0, #29
 800104e:	f000 fb30 	bl	80016b2 <HAL_NVIC_EnableIRQ>
}
 8001052:	e010      	b.n	8001076 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <HAL_TIM_Base_MspInit+0xa4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d10b      	bne.n	8001076 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_TIM_Base_MspInit+0x9c>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	4a07      	ldr	r2, [pc, #28]	; (8001080 <HAL_TIM_Base_MspInit+0x9c>)
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	61d3      	str	r3, [r2, #28]
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_TIM_Base_MspInit+0x9c>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
}
 8001076:	bf00      	nop
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000
 8001084:	40000400 	.word	0x40000400
 8001088:	40000800 	.word	0x40000800

0800108c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010aa:	d12b      	bne.n	8001104 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	4b35      	ldr	r3, [pc, #212]	; (8001184 <HAL_TIM_MspPostInit+0xf8>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a34      	ldr	r2, [pc, #208]	; (8001184 <HAL_TIM_MspPostInit+0xf8>)
 80010b2:	f043 0304 	orr.w	r3, r3, #4
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b32      	ldr	r3, [pc, #200]	; (8001184 <HAL_TIM_MspPostInit+0xf8>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2302      	movs	r3, #2
 80010d0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	482b      	ldr	r0, [pc, #172]	; (8001188 <HAL_TIM_MspPostInit+0xfc>)
 80010da:	f000 fc65 	bl	80019a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80010de:	4b2b      	ldr	r3, [pc, #172]	; (800118c <HAL_TIM_MspPostInit+0x100>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
 80010fc:	4a23      	ldr	r2, [pc, #140]	; (800118c <HAL_TIM_MspPostInit+0x100>)
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001102:	e03a      	b.n	800117a <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a21      	ldr	r2, [pc, #132]	; (8001190 <HAL_TIM_MspPostInit+0x104>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d118      	bne.n	8001140 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <HAL_TIM_MspPostInit+0xf8>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	4a1c      	ldr	r2, [pc, #112]	; (8001184 <HAL_TIM_MspPostInit+0xf8>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	6193      	str	r3, [r2, #24]
 800111a:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <HAL_TIM_MspPostInit+0xf8>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001126:	2340      	movs	r3, #64	; 0x40
 8001128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2302      	movs	r3, #2
 8001130:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	4813      	ldr	r0, [pc, #76]	; (8001188 <HAL_TIM_MspPostInit+0xfc>)
 800113a:	f000 fc35 	bl	80019a8 <HAL_GPIO_Init>
}
 800113e:	e01c      	b.n	800117a <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a13      	ldr	r2, [pc, #76]	; (8001194 <HAL_TIM_MspPostInit+0x108>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d117      	bne.n	800117a <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_TIM_MspPostInit+0xf8>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <HAL_TIM_MspPostInit+0xf8>)
 8001150:	f043 0308 	orr.w	r3, r3, #8
 8001154:	6193      	str	r3, [r2, #24]
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_TIM_MspPostInit+0xf8>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001162:	2340      	movs	r3, #64	; 0x40
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2302      	movs	r3, #2
 800116c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	4808      	ldr	r0, [pc, #32]	; (8001198 <HAL_TIM_MspPostInit+0x10c>)
 8001176:	f000 fc17 	bl	80019a8 <HAL_GPIO_Init>
}
 800117a:	bf00      	nop
 800117c:	3728      	adds	r7, #40	; 0x28
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000
 8001188:	40010800 	.word	0x40010800
 800118c:	40010000 	.word	0x40010000
 8001190:	40000400 	.word	0x40000400
 8001194:	40000800 	.word	0x40000800
 8001198:	40010c00 	.word	0x40010c00

0800119c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a42      	ldr	r2, [pc, #264]	; (80012c0 <HAL_UART_MspInit+0x124>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d17d      	bne.n	80012b8 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011bc:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <HAL_UART_MspInit+0x128>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a40      	ldr	r2, [pc, #256]	; (80012c4 <HAL_UART_MspInit+0x128>)
 80011c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <HAL_UART_MspInit+0x128>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d4:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <HAL_UART_MspInit+0x128>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a3a      	ldr	r2, [pc, #232]	; (80012c4 <HAL_UART_MspInit+0x128>)
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b38      	ldr	r3, [pc, #224]	; (80012c4 <HAL_UART_MspInit+0x128>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	4619      	mov	r1, r3
 8001200:	4831      	ldr	r0, [pc, #196]	; (80012c8 <HAL_UART_MspInit+0x12c>)
 8001202:	f000 fbd1 	bl	80019a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800120a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	4619      	mov	r1, r3
 800121a:	482b      	ldr	r0, [pc, #172]	; (80012c8 <HAL_UART_MspInit+0x12c>)
 800121c:	f000 fbc4 	bl	80019a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001220:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <HAL_UART_MspInit+0x130>)
 8001222:	4a2b      	ldr	r2, [pc, #172]	; (80012d0 <HAL_UART_MspInit+0x134>)
 8001224:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001226:	4b29      	ldr	r3, [pc, #164]	; (80012cc <HAL_UART_MspInit+0x130>)
 8001228:	2200      	movs	r2, #0
 800122a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800122c:	4b27      	ldr	r3, [pc, #156]	; (80012cc <HAL_UART_MspInit+0x130>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <HAL_UART_MspInit+0x130>)
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001238:	4b24      	ldr	r3, [pc, #144]	; (80012cc <HAL_UART_MspInit+0x130>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800123e:	4b23      	ldr	r3, [pc, #140]	; (80012cc <HAL_UART_MspInit+0x130>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001244:	4b21      	ldr	r3, [pc, #132]	; (80012cc <HAL_UART_MspInit+0x130>)
 8001246:	2220      	movs	r2, #32
 8001248:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <HAL_UART_MspInit+0x130>)
 800124c:	2200      	movs	r2, #0
 800124e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001250:	481e      	ldr	r0, [pc, #120]	; (80012cc <HAL_UART_MspInit+0x130>)
 8001252:	f000 fa49 	bl	80016e8 <HAL_DMA_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 800125c:	f7ff fe8a 	bl	8000f74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a1a      	ldr	r2, [pc, #104]	; (80012cc <HAL_UART_MspInit+0x130>)
 8001264:	639a      	str	r2, [r3, #56]	; 0x38
 8001266:	4a19      	ldr	r2, [pc, #100]	; (80012cc <HAL_UART_MspInit+0x130>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_UART_MspInit+0x138>)
 800126e:	4a1a      	ldr	r2, [pc, #104]	; (80012d8 <HAL_UART_MspInit+0x13c>)
 8001270:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <HAL_UART_MspInit+0x138>)
 8001274:	2210      	movs	r2, #16
 8001276:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_UART_MspInit+0x138>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_UART_MspInit+0x138>)
 8001280:	2280      	movs	r2, #128	; 0x80
 8001282:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_UART_MspInit+0x138>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_UART_MspInit+0x138>)
 800128c:	2200      	movs	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001290:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <HAL_UART_MspInit+0x138>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <HAL_UART_MspInit+0x138>)
 8001298:	2200      	movs	r2, #0
 800129a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800129c:	480d      	ldr	r0, [pc, #52]	; (80012d4 <HAL_UART_MspInit+0x138>)
 800129e:	f000 fa23 	bl	80016e8 <HAL_DMA_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80012a8:	f7ff fe64 	bl	8000f74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <HAL_UART_MspInit+0x138>)
 80012b0:	635a      	str	r2, [r3, #52]	; 0x34
 80012b2:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <HAL_UART_MspInit+0x138>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012b8:	bf00      	nop
 80012ba:	3720      	adds	r7, #32
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40013800 	.word	0x40013800
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40010800 	.word	0x40010800
 80012cc:	20000148 	.word	0x20000148
 80012d0:	40020058 	.word	0x40020058
 80012d4:	2000018c 	.word	0x2000018c
 80012d8:	40020044 	.word	0x40020044

080012dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <NMI_Handler+0x4>

080012e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <HardFault_Handler+0x4>

080012e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <MemManage_Handler+0x4>

080012ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <BusFault_Handler+0x4>

080012f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <UsageFault_Handler+0x4>

080012fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr

08001306 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr

08001312 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr

0800131e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001322:	f000 f893 	bl	800144c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001330:	4802      	ldr	r0, [pc, #8]	; (800133c <DMA1_Channel4_IRQHandler+0x10>)
 8001332:	f000 fa33 	bl	800179c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000018c 	.word	0x2000018c

08001340 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <DMA1_Channel5_IRQHandler+0x10>)
 8001346:	f000 fa29 	bl	800179c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000148 	.word	0x20000148

08001354 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <TIM2_IRQHandler+0x10>)
 800135a:	f001 fb21 	bl	80029a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	2000002c 	.word	0x2000002c

08001368 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <TIM3_IRQHandler+0x10>)
 800136e:	f001 fb17 	bl	80029a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000074 	.word	0x20000074

0800137c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001388:	480c      	ldr	r0, [pc, #48]	; (80013bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800138a:	490d      	ldr	r1, [pc, #52]	; (80013c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001390:	e002      	b.n	8001398 <LoopCopyDataInit>

08001392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001396:	3304      	adds	r3, #4

08001398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800139c:	d3f9      	bcc.n	8001392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013a0:	4c0a      	ldr	r4, [pc, #40]	; (80013cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a4:	e001      	b.n	80013aa <LoopFillZerobss>

080013a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a8:	3204      	adds	r2, #4

080013aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ac:	d3fb      	bcc.n	80013a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013ae:	f7ff ffe5 	bl	800137c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013b2:	f002 fa63 	bl	800387c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013b6:	f7ff fac3 	bl	8000940 <main>
  bx lr
 80013ba:	4770      	bx	lr
  ldr r0, =_sdata
 80013bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80013c4:	0800392c 	.word	0x0800392c
  ldr r2, =_sbss
 80013c8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80013cc:	200001d8 	.word	0x200001d8

080013d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013d0:	e7fe      	b.n	80013d0 <ADC1_IRQHandler>

080013d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d6:	2003      	movs	r0, #3
 80013d8:	f000 f944 	bl	8001664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013dc:	200f      	movs	r0, #15
 80013de:	f000 f805 	bl	80013ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e2:	f7ff fdcd 	bl	8000f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x54>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_InitTick+0x58>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4619      	mov	r1, r3
 80013fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001402:	fbb3 f3f1 	udiv	r3, r3, r1
 8001406:	fbb2 f3f3 	udiv	r3, r2, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f95f 	bl	80016ce <HAL_SYSTICK_Config>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e00e      	b.n	8001438 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b0f      	cmp	r3, #15
 800141e:	d80a      	bhi.n	8001436 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001420:	2200      	movs	r2, #0
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f000 f927 	bl	800167a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800142c:	4a06      	ldr	r2, [pc, #24]	; (8001448 <HAL_InitTick+0x5c>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	e000      	b.n	8001438 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000004 	.word	0x20000004
 8001444:	2000000c 	.word	0x2000000c
 8001448:	20000008 	.word	0x20000008

0800144c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <HAL_IncTick+0x1c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_IncTick+0x20>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4413      	add	r3, r2
 800145c:	4a03      	ldr	r2, [pc, #12]	; (800146c <HAL_IncTick+0x20>)
 800145e:	6013      	str	r3, [r2, #0]
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	2000000c 	.word	0x2000000c
 800146c:	200001d4 	.word	0x200001d4

08001470 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return uwTick;
 8001474:	4b02      	ldr	r3, [pc, #8]	; (8001480 <HAL_GetTick+0x10>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	200001d4 	.word	0x200001d4

08001484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800148c:	f7ff fff0 	bl	8001470 <HAL_GetTick>
 8001490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149c:	d005      	beq.n	80014aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <HAL_Delay+0x44>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4413      	add	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014aa:	bf00      	nop
 80014ac:	f7ff ffe0 	bl	8001470 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d8f7      	bhi.n	80014ac <HAL_Delay+0x28>
  {
  }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000000c 	.word	0x2000000c

080014cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <__NVIC_SetPriorityGrouping+0x44>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e8:	4013      	ands	r3, r2
 80014ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fe:	4a04      	ldr	r2, [pc, #16]	; (8001510 <__NVIC_SetPriorityGrouping+0x44>)
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	60d3      	str	r3, [r2, #12]
}
 8001504:	bf00      	nop
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <__NVIC_GetPriorityGrouping+0x18>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	0a1b      	lsrs	r3, r3, #8
 800151e:	f003 0307 	and.w	r3, r3, #7
}
 8001522:	4618      	mov	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	2b00      	cmp	r3, #0
 8001540:	db0b      	blt.n	800155a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	f003 021f 	and.w	r2, r3, #31
 8001548:	4906      	ldr	r1, [pc, #24]	; (8001564 <__NVIC_EnableIRQ+0x34>)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	095b      	lsrs	r3, r3, #5
 8001550:	2001      	movs	r0, #1
 8001552:	fa00 f202 	lsl.w	r2, r0, r2
 8001556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100

08001568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	6039      	str	r1, [r7, #0]
 8001572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001578:	2b00      	cmp	r3, #0
 800157a:	db0a      	blt.n	8001592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	490c      	ldr	r1, [pc, #48]	; (80015b4 <__NVIC_SetPriority+0x4c>)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	0112      	lsls	r2, r2, #4
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	440b      	add	r3, r1
 800158c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001590:	e00a      	b.n	80015a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	b2da      	uxtb	r2, r3
 8001596:	4908      	ldr	r1, [pc, #32]	; (80015b8 <__NVIC_SetPriority+0x50>)
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	3b04      	subs	r3, #4
 80015a0:	0112      	lsls	r2, r2, #4
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	440b      	add	r3, r1
 80015a6:	761a      	strb	r2, [r3, #24]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000e100 	.word	0xe000e100
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b089      	sub	sp, #36	; 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f1c3 0307 	rsb	r3, r3, #7
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	bf28      	it	cs
 80015da:	2304      	movcs	r3, #4
 80015dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3304      	adds	r3, #4
 80015e2:	2b06      	cmp	r3, #6
 80015e4:	d902      	bls.n	80015ec <NVIC_EncodePriority+0x30>
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3b03      	subs	r3, #3
 80015ea:	e000      	b.n	80015ee <NVIC_EncodePriority+0x32>
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	f04f 32ff 	mov.w	r2, #4294967295
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43da      	mvns	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	401a      	ands	r2, r3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001604:	f04f 31ff 	mov.w	r1, #4294967295
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa01 f303 	lsl.w	r3, r1, r3
 800160e:	43d9      	mvns	r1, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	4313      	orrs	r3, r2
         );
}
 8001616:	4618      	mov	r0, r3
 8001618:	3724      	adds	r7, #36	; 0x24
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3b01      	subs	r3, #1
 800162c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001630:	d301      	bcc.n	8001636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001632:	2301      	movs	r3, #1
 8001634:	e00f      	b.n	8001656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001636:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <SysTick_Config+0x40>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3b01      	subs	r3, #1
 800163c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800163e:	210f      	movs	r1, #15
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f7ff ff90 	bl	8001568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <SysTick_Config+0x40>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164e:	4b04      	ldr	r3, [pc, #16]	; (8001660 <SysTick_Config+0x40>)
 8001650:	2207      	movs	r2, #7
 8001652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	e000e010 	.word	0xe000e010

08001664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ff2d 	bl	80014cc <__NVIC_SetPriorityGrouping>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800168c:	f7ff ff42 	bl	8001514 <__NVIC_GetPriorityGrouping>
 8001690:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	68b9      	ldr	r1, [r7, #8]
 8001696:	6978      	ldr	r0, [r7, #20]
 8001698:	f7ff ff90 	bl	80015bc <NVIC_EncodePriority>
 800169c:	4602      	mov	r2, r0
 800169e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff5f 	bl	8001568 <__NVIC_SetPriority>
}
 80016aa:	bf00      	nop
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff35 	bl	8001530 <__NVIC_EnableIRQ>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff ffa2 	bl	8001620 <SysTick_Config>
 80016dc:	4603      	mov	r3, r0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e043      	b.n	8001786 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	4b22      	ldr	r3, [pc, #136]	; (8001790 <HAL_DMA_Init+0xa8>)
 8001706:	4413      	add	r3, r2
 8001708:	4a22      	ldr	r2, [pc, #136]	; (8001794 <HAL_DMA_Init+0xac>)
 800170a:	fba2 2303 	umull	r2, r3, r2, r3
 800170e:	091b      	lsrs	r3, r3, #4
 8001710:	009a      	lsls	r2, r3, #2
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a1f      	ldr	r2, [pc, #124]	; (8001798 <HAL_DMA_Init+0xb0>)
 800171a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2202      	movs	r2, #2
 8001720:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001732:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001736:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001740:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800174c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001758:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	4313      	orrs	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	bffdfff8 	.word	0xbffdfff8
 8001794:	cccccccd 	.word	0xcccccccd
 8001798:	40020000 	.word	0x40020000

0800179c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	2204      	movs	r2, #4
 80017ba:	409a      	lsls	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4013      	ands	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d04f      	beq.n	8001864 <HAL_DMA_IRQHandler+0xc8>
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d04a      	beq.n	8001864 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0320 	and.w	r3, r3, #32
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d107      	bne.n	80017ec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0204 	bic.w	r2, r2, #4
 80017ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a66      	ldr	r2, [pc, #408]	; (800198c <HAL_DMA_IRQHandler+0x1f0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d029      	beq.n	800184a <HAL_DMA_IRQHandler+0xae>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a65      	ldr	r2, [pc, #404]	; (8001990 <HAL_DMA_IRQHandler+0x1f4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d022      	beq.n	8001846 <HAL_DMA_IRQHandler+0xaa>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a63      	ldr	r2, [pc, #396]	; (8001994 <HAL_DMA_IRQHandler+0x1f8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d01a      	beq.n	8001840 <HAL_DMA_IRQHandler+0xa4>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a62      	ldr	r2, [pc, #392]	; (8001998 <HAL_DMA_IRQHandler+0x1fc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d012      	beq.n	800183a <HAL_DMA_IRQHandler+0x9e>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a60      	ldr	r2, [pc, #384]	; (800199c <HAL_DMA_IRQHandler+0x200>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00a      	beq.n	8001834 <HAL_DMA_IRQHandler+0x98>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a5f      	ldr	r2, [pc, #380]	; (80019a0 <HAL_DMA_IRQHandler+0x204>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d102      	bne.n	800182e <HAL_DMA_IRQHandler+0x92>
 8001828:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800182c:	e00e      	b.n	800184c <HAL_DMA_IRQHandler+0xb0>
 800182e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001832:	e00b      	b.n	800184c <HAL_DMA_IRQHandler+0xb0>
 8001834:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001838:	e008      	b.n	800184c <HAL_DMA_IRQHandler+0xb0>
 800183a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800183e:	e005      	b.n	800184c <HAL_DMA_IRQHandler+0xb0>
 8001840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001844:	e002      	b.n	800184c <HAL_DMA_IRQHandler+0xb0>
 8001846:	2340      	movs	r3, #64	; 0x40
 8001848:	e000      	b.n	800184c <HAL_DMA_IRQHandler+0xb0>
 800184a:	2304      	movs	r3, #4
 800184c:	4a55      	ldr	r2, [pc, #340]	; (80019a4 <HAL_DMA_IRQHandler+0x208>)
 800184e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 8094 	beq.w	8001982 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001862:	e08e      	b.n	8001982 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	2202      	movs	r2, #2
 800186a:	409a      	lsls	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4013      	ands	r3, r2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d056      	beq.n	8001922 <HAL_DMA_IRQHandler+0x186>
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d051      	beq.n	8001922 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0320 	and.w	r3, r3, #32
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10b      	bne.n	80018a4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 020a 	bic.w	r2, r2, #10
 800189a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a38      	ldr	r2, [pc, #224]	; (800198c <HAL_DMA_IRQHandler+0x1f0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d029      	beq.n	8001902 <HAL_DMA_IRQHandler+0x166>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a37      	ldr	r2, [pc, #220]	; (8001990 <HAL_DMA_IRQHandler+0x1f4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d022      	beq.n	80018fe <HAL_DMA_IRQHandler+0x162>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a35      	ldr	r2, [pc, #212]	; (8001994 <HAL_DMA_IRQHandler+0x1f8>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d01a      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x15c>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a34      	ldr	r2, [pc, #208]	; (8001998 <HAL_DMA_IRQHandler+0x1fc>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d012      	beq.n	80018f2 <HAL_DMA_IRQHandler+0x156>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a32      	ldr	r2, [pc, #200]	; (800199c <HAL_DMA_IRQHandler+0x200>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d00a      	beq.n	80018ec <HAL_DMA_IRQHandler+0x150>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a31      	ldr	r2, [pc, #196]	; (80019a0 <HAL_DMA_IRQHandler+0x204>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d102      	bne.n	80018e6 <HAL_DMA_IRQHandler+0x14a>
 80018e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018e4:	e00e      	b.n	8001904 <HAL_DMA_IRQHandler+0x168>
 80018e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ea:	e00b      	b.n	8001904 <HAL_DMA_IRQHandler+0x168>
 80018ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f0:	e008      	b.n	8001904 <HAL_DMA_IRQHandler+0x168>
 80018f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f6:	e005      	b.n	8001904 <HAL_DMA_IRQHandler+0x168>
 80018f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018fc:	e002      	b.n	8001904 <HAL_DMA_IRQHandler+0x168>
 80018fe:	2320      	movs	r3, #32
 8001900:	e000      	b.n	8001904 <HAL_DMA_IRQHandler+0x168>
 8001902:	2302      	movs	r3, #2
 8001904:	4a27      	ldr	r2, [pc, #156]	; (80019a4 <HAL_DMA_IRQHandler+0x208>)
 8001906:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	2b00      	cmp	r3, #0
 8001916:	d034      	beq.n	8001982 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001920:	e02f      	b.n	8001982 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	2208      	movs	r2, #8
 8001928:	409a      	lsls	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4013      	ands	r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d028      	beq.n	8001984 <HAL_DMA_IRQHandler+0x1e8>
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d023      	beq.n	8001984 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 020e 	bic.w	r2, r2, #14
 800194a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001954:	2101      	movs	r1, #1
 8001956:	fa01 f202 	lsl.w	r2, r1, r2
 800195a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	2b00      	cmp	r3, #0
 8001978:	d004      	beq.n	8001984 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	4798      	blx	r3
    }
  }
  return;
 8001982:	bf00      	nop
 8001984:	bf00      	nop
}
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40020008 	.word	0x40020008
 8001990:	4002001c 	.word	0x4002001c
 8001994:	40020030 	.word	0x40020030
 8001998:	40020044 	.word	0x40020044
 800199c:	40020058 	.word	0x40020058
 80019a0:	4002006c 	.word	0x4002006c
 80019a4:	40020000 	.word	0x40020000

080019a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b08b      	sub	sp, #44	; 0x2c
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ba:	e169      	b.n	8001c90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019bc:	2201      	movs	r2, #1
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	69fa      	ldr	r2, [r7, #28]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	f040 8158 	bne.w	8001c8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4a9a      	ldr	r2, [pc, #616]	; (8001c48 <HAL_GPIO_Init+0x2a0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d05e      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 80019e4:	4a98      	ldr	r2, [pc, #608]	; (8001c48 <HAL_GPIO_Init+0x2a0>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d875      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 80019ea:	4a98      	ldr	r2, [pc, #608]	; (8001c4c <HAL_GPIO_Init+0x2a4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d058      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 80019f0:	4a96      	ldr	r2, [pc, #600]	; (8001c4c <HAL_GPIO_Init+0x2a4>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d86f      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 80019f6:	4a96      	ldr	r2, [pc, #600]	; (8001c50 <HAL_GPIO_Init+0x2a8>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d052      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 80019fc:	4a94      	ldr	r2, [pc, #592]	; (8001c50 <HAL_GPIO_Init+0x2a8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d869      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a02:	4a94      	ldr	r2, [pc, #592]	; (8001c54 <HAL_GPIO_Init+0x2ac>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d04c      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 8001a08:	4a92      	ldr	r2, [pc, #584]	; (8001c54 <HAL_GPIO_Init+0x2ac>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d863      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a0e:	4a92      	ldr	r2, [pc, #584]	; (8001c58 <HAL_GPIO_Init+0x2b0>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d046      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 8001a14:	4a90      	ldr	r2, [pc, #576]	; (8001c58 <HAL_GPIO_Init+0x2b0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d85d      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a1a:	2b12      	cmp	r3, #18
 8001a1c:	d82a      	bhi.n	8001a74 <HAL_GPIO_Init+0xcc>
 8001a1e:	2b12      	cmp	r3, #18
 8001a20:	d859      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a22:	a201      	add	r2, pc, #4	; (adr r2, 8001a28 <HAL_GPIO_Init+0x80>)
 8001a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a28:	08001aa3 	.word	0x08001aa3
 8001a2c:	08001a7d 	.word	0x08001a7d
 8001a30:	08001a8f 	.word	0x08001a8f
 8001a34:	08001ad1 	.word	0x08001ad1
 8001a38:	08001ad7 	.word	0x08001ad7
 8001a3c:	08001ad7 	.word	0x08001ad7
 8001a40:	08001ad7 	.word	0x08001ad7
 8001a44:	08001ad7 	.word	0x08001ad7
 8001a48:	08001ad7 	.word	0x08001ad7
 8001a4c:	08001ad7 	.word	0x08001ad7
 8001a50:	08001ad7 	.word	0x08001ad7
 8001a54:	08001ad7 	.word	0x08001ad7
 8001a58:	08001ad7 	.word	0x08001ad7
 8001a5c:	08001ad7 	.word	0x08001ad7
 8001a60:	08001ad7 	.word	0x08001ad7
 8001a64:	08001ad7 	.word	0x08001ad7
 8001a68:	08001ad7 	.word	0x08001ad7
 8001a6c:	08001a85 	.word	0x08001a85
 8001a70:	08001a99 	.word	0x08001a99
 8001a74:	4a79      	ldr	r2, [pc, #484]	; (8001c5c <HAL_GPIO_Init+0x2b4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a7a:	e02c      	b.n	8001ad6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	623b      	str	r3, [r7, #32]
          break;
 8001a82:	e029      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	623b      	str	r3, [r7, #32]
          break;
 8001a8c:	e024      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	3308      	adds	r3, #8
 8001a94:	623b      	str	r3, [r7, #32]
          break;
 8001a96:	e01f      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	330c      	adds	r3, #12
 8001a9e:	623b      	str	r3, [r7, #32]
          break;
 8001aa0:	e01a      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aaa:	2304      	movs	r3, #4
 8001aac:	623b      	str	r3, [r7, #32]
          break;
 8001aae:	e013      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d105      	bne.n	8001ac4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ab8:	2308      	movs	r3, #8
 8001aba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	611a      	str	r2, [r3, #16]
          break;
 8001ac2:	e009      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac4:	2308      	movs	r3, #8
 8001ac6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	615a      	str	r2, [r3, #20]
          break;
 8001ace:	e003      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	623b      	str	r3, [r7, #32]
          break;
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          break;
 8001ad6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	2bff      	cmp	r3, #255	; 0xff
 8001adc:	d801      	bhi.n	8001ae2 <HAL_GPIO_Init+0x13a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	e001      	b.n	8001ae6 <HAL_GPIO_Init+0x13e>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2bff      	cmp	r3, #255	; 0xff
 8001aec:	d802      	bhi.n	8001af4 <HAL_GPIO_Init+0x14c>
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	e002      	b.n	8001afa <HAL_GPIO_Init+0x152>
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	3b08      	subs	r3, #8
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	210f      	movs	r1, #15
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	fa01 f303 	lsl.w	r3, r1, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	6a39      	ldr	r1, [r7, #32]
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	431a      	orrs	r2, r3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 80b1 	beq.w	8001c8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b28:	4b4d      	ldr	r3, [pc, #308]	; (8001c60 <HAL_GPIO_Init+0x2b8>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	4a4c      	ldr	r2, [pc, #304]	; (8001c60 <HAL_GPIO_Init+0x2b8>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6193      	str	r3, [r2, #24]
 8001b34:	4b4a      	ldr	r3, [pc, #296]	; (8001c60 <HAL_GPIO_Init+0x2b8>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b40:	4a48      	ldr	r2, [pc, #288]	; (8001c64 <HAL_GPIO_Init+0x2bc>)
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	3302      	adds	r3, #2
 8001b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	220f      	movs	r2, #15
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4013      	ands	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a40      	ldr	r2, [pc, #256]	; (8001c68 <HAL_GPIO_Init+0x2c0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d013      	beq.n	8001b94 <HAL_GPIO_Init+0x1ec>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a3f      	ldr	r2, [pc, #252]	; (8001c6c <HAL_GPIO_Init+0x2c4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d00d      	beq.n	8001b90 <HAL_GPIO_Init+0x1e8>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a3e      	ldr	r2, [pc, #248]	; (8001c70 <HAL_GPIO_Init+0x2c8>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d007      	beq.n	8001b8c <HAL_GPIO_Init+0x1e4>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a3d      	ldr	r2, [pc, #244]	; (8001c74 <HAL_GPIO_Init+0x2cc>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d101      	bne.n	8001b88 <HAL_GPIO_Init+0x1e0>
 8001b84:	2303      	movs	r3, #3
 8001b86:	e006      	b.n	8001b96 <HAL_GPIO_Init+0x1ee>
 8001b88:	2304      	movs	r3, #4
 8001b8a:	e004      	b.n	8001b96 <HAL_GPIO_Init+0x1ee>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e002      	b.n	8001b96 <HAL_GPIO_Init+0x1ee>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <HAL_GPIO_Init+0x1ee>
 8001b94:	2300      	movs	r3, #0
 8001b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b98:	f002 0203 	and.w	r2, r2, #3
 8001b9c:	0092      	lsls	r2, r2, #2
 8001b9e:	4093      	lsls	r3, r2
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ba6:	492f      	ldr	r1, [pc, #188]	; (8001c64 <HAL_GPIO_Init+0x2bc>)
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	089b      	lsrs	r3, r3, #2
 8001bac:	3302      	adds	r3, #2
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d006      	beq.n	8001bce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	492c      	ldr	r1, [pc, #176]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	600b      	str	r3, [r1, #0]
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bce:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	4928      	ldr	r1, [pc, #160]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d006      	beq.n	8001bf6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001be8:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	4922      	ldr	r1, [pc, #136]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bf6:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	491e      	ldr	r1, [pc, #120]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d006      	beq.n	8001c1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	4918      	ldr	r1, [pc, #96]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	608b      	str	r3, [r1, #8]
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c1e:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	4914      	ldr	r1, [pc, #80]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d021      	beq.n	8001c7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	490e      	ldr	r1, [pc, #56]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60cb      	str	r3, [r1, #12]
 8001c44:	e021      	b.n	8001c8a <HAL_GPIO_Init+0x2e2>
 8001c46:	bf00      	nop
 8001c48:	10320000 	.word	0x10320000
 8001c4c:	10310000 	.word	0x10310000
 8001c50:	10220000 	.word	0x10220000
 8001c54:	10210000 	.word	0x10210000
 8001c58:	10120000 	.word	0x10120000
 8001c5c:	10110000 	.word	0x10110000
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40010000 	.word	0x40010000
 8001c68:	40010800 	.word	0x40010800
 8001c6c:	40010c00 	.word	0x40010c00
 8001c70:	40011000 	.word	0x40011000
 8001c74:	40011400 	.word	0x40011400
 8001c78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	4909      	ldr	r1, [pc, #36]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f47f ae8e 	bne.w	80019bc <HAL_GPIO_Init+0x14>
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	372c      	adds	r7, #44	; 0x2c
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	40010400 	.word	0x40010400

08001cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cc0:	787b      	ldrb	r3, [r7, #1]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cc6:	887a      	ldrh	r2, [r7, #2]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ccc:	e003      	b.n	8001cd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cce:	887b      	ldrh	r3, [r7, #2]
 8001cd0:	041a      	lsls	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	611a      	str	r2, [r3, #16]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e272      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 8087 	beq.w	8001e0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d00:	4b92      	ldr	r3, [pc, #584]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d00c      	beq.n	8001d26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d0c:	4b8f      	ldr	r3, [pc, #572]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d112      	bne.n	8001d3e <HAL_RCC_OscConfig+0x5e>
 8001d18:	4b8c      	ldr	r3, [pc, #560]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d24:	d10b      	bne.n	8001d3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d26:	4b89      	ldr	r3, [pc, #548]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d06c      	beq.n	8001e0c <HAL_RCC_OscConfig+0x12c>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d168      	bne.n	8001e0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e24c      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x76>
 8001d48:	4b80      	ldr	r3, [pc, #512]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a7f      	ldr	r2, [pc, #508]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	e02e      	b.n	8001db4 <HAL_RCC_OscConfig+0xd4>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x98>
 8001d5e:	4b7b      	ldr	r3, [pc, #492]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a7a      	ldr	r2, [pc, #488]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4b78      	ldr	r3, [pc, #480]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a77      	ldr	r2, [pc, #476]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e01d      	b.n	8001db4 <HAL_RCC_OscConfig+0xd4>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0xbc>
 8001d82:	4b72      	ldr	r3, [pc, #456]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a71      	ldr	r2, [pc, #452]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b6f      	ldr	r3, [pc, #444]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a6e      	ldr	r2, [pc, #440]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e00b      	b.n	8001db4 <HAL_RCC_OscConfig+0xd4>
 8001d9c:	4b6b      	ldr	r3, [pc, #428]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a6a      	ldr	r2, [pc, #424]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	4b68      	ldr	r3, [pc, #416]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a67      	ldr	r2, [pc, #412]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fb58 	bl	8001470 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7ff fb54 	bl	8001470 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	; 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e200      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	4b5d      	ldr	r3, [pc, #372]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0xe4>
 8001de2:	e014      	b.n	8001e0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7ff fb44 	bl	8001470 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dec:	f7ff fb40 	bl	8001470 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	; 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e1ec      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfe:	4b53      	ldr	r3, [pc, #332]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x10c>
 8001e0a:	e000      	b.n	8001e0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d063      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e1a:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00b      	beq.n	8001e3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e26:	4b49      	ldr	r3, [pc, #292]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d11c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x18c>
 8001e32:	4b46      	ldr	r3, [pc, #280]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d116      	bne.n	8001e6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3e:	4b43      	ldr	r3, [pc, #268]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_RCC_OscConfig+0x176>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e1c0      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e56:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4939      	ldr	r1, [pc, #228]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6a:	e03a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d020      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e74:	4b36      	ldr	r3, [pc, #216]	; (8001f50 <HAL_RCC_OscConfig+0x270>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7a:	f7ff faf9 	bl	8001470 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e82:	f7ff faf5 	bl	8001470 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e1a1      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e94:	4b2d      	ldr	r3, [pc, #180]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4927      	ldr	r1, [pc, #156]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]
 8001eb4:	e015      	b.n	8001ee2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb6:	4b26      	ldr	r3, [pc, #152]	; (8001f50 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7ff fad8 	bl	8001470 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec4:	f7ff fad4 	bl	8001470 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e180      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d03a      	beq.n	8001f64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d019      	beq.n	8001f2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef6:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efc:	f7ff fab8 	bl	8001470 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f04:	f7ff fab4 	bl	8001470 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e160      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f16:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f22:	2001      	movs	r0, #1
 8001f24:	f000 faaa 	bl	800247c <RCC_Delay>
 8001f28:	e01c      	b.n	8001f64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f30:	f7ff fa9e 	bl	8001470 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f36:	e00f      	b.n	8001f58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f38:	f7ff fa9a 	bl	8001470 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d908      	bls.n	8001f58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e146      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
 8001f4a:	bf00      	nop
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	42420000 	.word	0x42420000
 8001f54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f58:	4b92      	ldr	r3, [pc, #584]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1e9      	bne.n	8001f38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 80a6 	beq.w	80020be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f76:	4b8b      	ldr	r3, [pc, #556]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10d      	bne.n	8001f9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f82:	4b88      	ldr	r3, [pc, #544]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	4a87      	ldr	r2, [pc, #540]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	61d3      	str	r3, [r2, #28]
 8001f8e:	4b85      	ldr	r3, [pc, #532]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	4b82      	ldr	r3, [pc, #520]	; (80021a8 <HAL_RCC_OscConfig+0x4c8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d118      	bne.n	8001fdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001faa:	4b7f      	ldr	r3, [pc, #508]	; (80021a8 <HAL_RCC_OscConfig+0x4c8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a7e      	ldr	r2, [pc, #504]	; (80021a8 <HAL_RCC_OscConfig+0x4c8>)
 8001fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb6:	f7ff fa5b 	bl	8001470 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fbe:	f7ff fa57 	bl	8001470 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b64      	cmp	r3, #100	; 0x64
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e103      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd0:	4b75      	ldr	r3, [pc, #468]	; (80021a8 <HAL_RCC_OscConfig+0x4c8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d106      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x312>
 8001fe4:	4b6f      	ldr	r3, [pc, #444]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4a6e      	ldr	r2, [pc, #440]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6213      	str	r3, [r2, #32]
 8001ff0:	e02d      	b.n	800204e <HAL_RCC_OscConfig+0x36e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0x334>
 8001ffa:	4b6a      	ldr	r3, [pc, #424]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4a69      	ldr	r2, [pc, #420]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	6213      	str	r3, [r2, #32]
 8002006:	4b67      	ldr	r3, [pc, #412]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	4a66      	ldr	r2, [pc, #408]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	f023 0304 	bic.w	r3, r3, #4
 8002010:	6213      	str	r3, [r2, #32]
 8002012:	e01c      	b.n	800204e <HAL_RCC_OscConfig+0x36e>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b05      	cmp	r3, #5
 800201a:	d10c      	bne.n	8002036 <HAL_RCC_OscConfig+0x356>
 800201c:	4b61      	ldr	r3, [pc, #388]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	4a60      	ldr	r2, [pc, #384]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002022:	f043 0304 	orr.w	r3, r3, #4
 8002026:	6213      	str	r3, [r2, #32]
 8002028:	4b5e      	ldr	r3, [pc, #376]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4a5d      	ldr	r2, [pc, #372]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6213      	str	r3, [r2, #32]
 8002034:	e00b      	b.n	800204e <HAL_RCC_OscConfig+0x36e>
 8002036:	4b5b      	ldr	r3, [pc, #364]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	4a5a      	ldr	r2, [pc, #360]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	6213      	str	r3, [r2, #32]
 8002042:	4b58      	ldr	r3, [pc, #352]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4a57      	ldr	r2, [pc, #348]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	f023 0304 	bic.w	r3, r3, #4
 800204c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d015      	beq.n	8002082 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002056:	f7ff fa0b 	bl	8001470 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205c:	e00a      	b.n	8002074 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205e:	f7ff fa07 	bl	8001470 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f241 3288 	movw	r2, #5000	; 0x1388
 800206c:	4293      	cmp	r3, r2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e0b1      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002074:	4b4b      	ldr	r3, [pc, #300]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0ee      	beq.n	800205e <HAL_RCC_OscConfig+0x37e>
 8002080:	e014      	b.n	80020ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002082:	f7ff f9f5 	bl	8001470 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002088:	e00a      	b.n	80020a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208a:	f7ff f9f1 	bl	8001470 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	f241 3288 	movw	r2, #5000	; 0x1388
 8002098:	4293      	cmp	r3, r2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e09b      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a0:	4b40      	ldr	r3, [pc, #256]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1ee      	bne.n	800208a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020ac:	7dfb      	ldrb	r3, [r7, #23]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d105      	bne.n	80020be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b2:	4b3c      	ldr	r3, [pc, #240]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	4a3b      	ldr	r2, [pc, #236]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8087 	beq.w	80021d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020c8:	4b36      	ldr	r3, [pc, #216]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d061      	beq.n	8002198 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d146      	bne.n	800216a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020dc:	4b33      	ldr	r3, [pc, #204]	; (80021ac <HAL_RCC_OscConfig+0x4cc>)
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7ff f9c5 	bl	8001470 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ea:	f7ff f9c1 	bl	8001470 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e06d      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fc:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1f0      	bne.n	80020ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002110:	d108      	bne.n	8002124 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002112:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002116:	f023 020f 	bic.w	r2, r3, #15
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	4921      	ldr	r1, [pc, #132]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002120:	4313      	orrs	r3, r2
 8002122:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002124:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a19      	ldr	r1, [r3, #32]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	430b      	orrs	r3, r1
 8002136:	491b      	ldr	r1, [pc, #108]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800213c:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <HAL_RCC_OscConfig+0x4cc>)
 800213e:	2201      	movs	r2, #1
 8002140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002142:	f7ff f995 	bl	8001470 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214a:	f7ff f991 	bl	8001470 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e03d      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x46a>
 8002168:	e035      	b.n	80021d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <HAL_RCC_OscConfig+0x4cc>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7ff f97e 	bl	8001470 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002178:	f7ff f97a 	bl	8001470 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e026      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x498>
 8002196:	e01e      	b.n	80021d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d107      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e019      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40007000 	.word	0x40007000
 80021ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_RCC_OscConfig+0x500>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d106      	bne.n	80021d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000

080021e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0a0      	b.n	800233a <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d020      	beq.n	8002246 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002210:	4b4c      	ldr	r3, [pc, #304]	; (8002344 <HAL_RCC_ClockConfig+0x160>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4a4b      	ldr	r2, [pc, #300]	; (8002344 <HAL_RCC_ClockConfig+0x160>)
 8002216:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800221a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002228:	4b46      	ldr	r3, [pc, #280]	; (8002344 <HAL_RCC_ClockConfig+0x160>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	4a45      	ldr	r2, [pc, #276]	; (8002344 <HAL_RCC_ClockConfig+0x160>)
 800222e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002232:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002234:	4b43      	ldr	r3, [pc, #268]	; (8002344 <HAL_RCC_ClockConfig+0x160>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4940      	ldr	r1, [pc, #256]	; (8002344 <HAL_RCC_ClockConfig+0x160>)
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d040      	beq.n	80022d4 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d107      	bne.n	800226a <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	4b3a      	ldr	r3, [pc, #232]	; (8002344 <HAL_RCC_ClockConfig+0x160>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d115      	bne.n	8002292 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e067      	b.n	800233a <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d107      	bne.n	8002282 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002272:	4b34      	ldr	r3, [pc, #208]	; (8002344 <HAL_RCC_ClockConfig+0x160>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d109      	bne.n	8002292 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e05b      	b.n	800233a <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002282:	4b30      	ldr	r3, [pc, #192]	; (8002344 <HAL_RCC_ClockConfig+0x160>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e053      	b.n	800233a <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002292:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <HAL_RCC_ClockConfig+0x160>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f023 0203 	bic.w	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4929      	ldr	r1, [pc, #164]	; (8002344 <HAL_RCC_ClockConfig+0x160>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a4:	f7ff f8e4 	bl	8001470 <HAL_GetTick>
 80022a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022aa:	e00a      	b.n	80022c2 <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ac:	f7ff f8e0 	bl	8001470 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e03b      	b.n	800233a <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <HAL_RCC_ClockConfig+0x160>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 020c 	and.w	r2, r3, #12
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d1eb      	bne.n	80022ac <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_RCC_ClockConfig+0x160>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4915      	ldr	r1, [pc, #84]	; (8002344 <HAL_RCC_ClockConfig+0x160>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_RCC_ClockConfig+0x160>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	490d      	ldr	r1, [pc, #52]	; (8002344 <HAL_RCC_ClockConfig+0x160>)
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002312:	f000 f81f 	bl	8002354 <HAL_RCC_GetSysClockFreq>
 8002316:	4602      	mov	r2, r0
 8002318:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <HAL_RCC_ClockConfig+0x160>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	4909      	ldr	r1, [pc, #36]	; (8002348 <HAL_RCC_ClockConfig+0x164>)
 8002324:	5ccb      	ldrb	r3, [r1, r3]
 8002326:	fa22 f303 	lsr.w	r3, r2, r3
 800232a:	4a08      	ldr	r2, [pc, #32]	; (800234c <HAL_RCC_ClockConfig+0x168>)
 800232c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <HAL_RCC_ClockConfig+0x16c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff f85a 	bl	80013ec <HAL_InitTick>

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000
 8002348:	0800390c 	.word	0x0800390c
 800234c:	20000004 	.word	0x20000004
 8002350:	20000008 	.word	0x20000008

08002354 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002354:	b490      	push	{r4, r7}
 8002356:	b08e      	sub	sp, #56	; 0x38
 8002358:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800235a:	4b2a      	ldr	r3, [pc, #168]	; (8002404 <HAL_RCC_GetSysClockFreq+0xb0>)
 800235c:	f107 0414 	add.w	r4, r7, #20
 8002360:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002362:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8002366:	4b28      	ldr	r3, [pc, #160]	; (8002408 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002368:	1d3c      	adds	r4, r7, #4
 800236a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800236c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002374:	2300      	movs	r3, #0
 8002376:	62bb      	str	r3, [r7, #40]	; 0x28
 8002378:	2300      	movs	r3, #0
 800237a:	637b      	str	r3, [r7, #52]	; 0x34
 800237c:	2300      	movs	r3, #0
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002384:	4b21      	ldr	r3, [pc, #132]	; (800240c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238c:	f003 030c 	and.w	r3, r3, #12
 8002390:	2b04      	cmp	r3, #4
 8002392:	d002      	beq.n	800239a <HAL_RCC_GetSysClockFreq+0x46>
 8002394:	2b08      	cmp	r3, #8
 8002396:	d003      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x4c>
 8002398:	e02a      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800239a:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <HAL_RCC_GetSysClockFreq+0xbc>)
 800239c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800239e:	e02a      	b.n	80023f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a2:	0c9b      	lsrs	r3, r3, #18
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	3338      	adds	r3, #56	; 0x38
 80023aa:	443b      	add	r3, r7
 80023ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d011      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80023bc:	4b13      	ldr	r3, [pc, #76]	; (800240c <HAL_RCC_GetSysClockFreq+0xb8>)
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	f003 030f 	and.w	r3, r3, #15
 80023c4:	3338      	adds	r3, #56	; 0x38
 80023c6:	443b      	add	r3, r7
 80023c8:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80023cc:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	4a0f      	ldr	r2, [pc, #60]	; (8002410 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023d2:	fb03 f202 	mul.w	r2, r3, r2
 80023d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	637b      	str	r3, [r7, #52]	; 0x34
 80023de:	e004      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	4a0c      	ldr	r2, [pc, #48]	; (8002414 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023e4:	fb02 f303 	mul.w	r3, r2, r3
 80023e8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 80023ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023ee:	e002      	b.n	80023f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023f0:	4b07      	ldr	r3, [pc, #28]	; (8002410 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3738      	adds	r7, #56	; 0x38
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc90      	pop	{r4, r7}
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	080038ec 	.word	0x080038ec
 8002408:	080038fc 	.word	0x080038fc
 800240c:	40021000 	.word	0x40021000
 8002410:	007a1200 	.word	0x007a1200
 8002414:	003d0900 	.word	0x003d0900

08002418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800241c:	4b02      	ldr	r3, [pc, #8]	; (8002428 <HAL_RCC_GetHCLKFreq+0x10>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	20000004 	.word	0x20000004

0800242c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002430:	f7ff fff2 	bl	8002418 <HAL_RCC_GetHCLKFreq>
 8002434:	4602      	mov	r2, r0
 8002436:	4b05      	ldr	r3, [pc, #20]	; (800244c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	0a1b      	lsrs	r3, r3, #8
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	4903      	ldr	r1, [pc, #12]	; (8002450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002442:	5ccb      	ldrb	r3, [r1, r3]
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002448:	4618      	mov	r0, r3
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40021000 	.word	0x40021000
 8002450:	0800391c 	.word	0x0800391c

08002454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002458:	f7ff ffde 	bl	8002418 <HAL_RCC_GetHCLKFreq>
 800245c:	4602      	mov	r2, r0
 800245e:	4b05      	ldr	r3, [pc, #20]	; (8002474 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	0adb      	lsrs	r3, r3, #11
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	4903      	ldr	r1, [pc, #12]	; (8002478 <HAL_RCC_GetPCLK2Freq+0x24>)
 800246a:	5ccb      	ldrb	r3, [r1, r3]
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002470:	4618      	mov	r0, r3
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000
 8002478:	0800391c 	.word	0x0800391c

0800247c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002484:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <RCC_Delay+0x34>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <RCC_Delay+0x38>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	0a5b      	lsrs	r3, r3, #9
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	fb02 f303 	mul.w	r3, r2, r3
 8002496:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002498:	bf00      	nop
  }
  while (Delay --);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1e5a      	subs	r2, r3, #1
 800249e:	60fa      	str	r2, [r7, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f9      	bne.n	8002498 <RCC_Delay+0x1c>
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	20000004 	.word	0x20000004
 80024b4:	10624dd3 	.word	0x10624dd3

080024b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e041      	b.n	800254e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7fe fd80 	bl	8000fe4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3304      	adds	r3, #4
 80024f4:	4619      	mov	r1, r3
 80024f6:	4610      	mov	r0, r2
 80024f8:	f000 fd00 	bl	8002efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e041      	b.n	80025ec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d106      	bne.n	8002582 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f839 	bl	80025f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2202      	movs	r2, #2
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3304      	adds	r3, #4
 8002592:	4619      	mov	r1, r3
 8002594:	4610      	mov	r0, r2
 8002596:	f000 fcb1 	bl	8002efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
	...

08002608 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d109      	bne.n	800262c <HAL_TIM_PWM_Start_IT+0x24>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b01      	cmp	r3, #1
 8002622:	bf14      	ite	ne
 8002624:	2301      	movne	r3, #1
 8002626:	2300      	moveq	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	e022      	b.n	8002672 <HAL_TIM_PWM_Start_IT+0x6a>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b04      	cmp	r3, #4
 8002630:	d109      	bne.n	8002646 <HAL_TIM_PWM_Start_IT+0x3e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b01      	cmp	r3, #1
 800263c:	bf14      	ite	ne
 800263e:	2301      	movne	r3, #1
 8002640:	2300      	moveq	r3, #0
 8002642:	b2db      	uxtb	r3, r3
 8002644:	e015      	b.n	8002672 <HAL_TIM_PWM_Start_IT+0x6a>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b08      	cmp	r3, #8
 800264a:	d109      	bne.n	8002660 <HAL_TIM_PWM_Start_IT+0x58>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b01      	cmp	r3, #1
 8002656:	bf14      	ite	ne
 8002658:	2301      	movne	r3, #1
 800265a:	2300      	moveq	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	e008      	b.n	8002672 <HAL_TIM_PWM_Start_IT+0x6a>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b01      	cmp	r3, #1
 800266a:	bf14      	ite	ne
 800266c:	2301      	movne	r3, #1
 800266e:	2300      	moveq	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e0bd      	b.n	80027f6 <HAL_TIM_PWM_Start_IT+0x1ee>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d104      	bne.n	800268a <HAL_TIM_PWM_Start_IT+0x82>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002688:	e013      	b.n	80026b2 <HAL_TIM_PWM_Start_IT+0xaa>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b04      	cmp	r3, #4
 800268e:	d104      	bne.n	800269a <HAL_TIM_PWM_Start_IT+0x92>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002698:	e00b      	b.n	80026b2 <HAL_TIM_PWM_Start_IT+0xaa>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b08      	cmp	r3, #8
 800269e:	d104      	bne.n	80026aa <HAL_TIM_PWM_Start_IT+0xa2>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026a8:	e003      	b.n	80026b2 <HAL_TIM_PWM_Start_IT+0xaa>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2202      	movs	r2, #2
 80026ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b0c      	cmp	r3, #12
 80026b6:	d841      	bhi.n	800273c <HAL_TIM_PWM_Start_IT+0x134>
 80026b8:	a201      	add	r2, pc, #4	; (adr r2, 80026c0 <HAL_TIM_PWM_Start_IT+0xb8>)
 80026ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026be:	bf00      	nop
 80026c0:	080026f5 	.word	0x080026f5
 80026c4:	0800273d 	.word	0x0800273d
 80026c8:	0800273d 	.word	0x0800273d
 80026cc:	0800273d 	.word	0x0800273d
 80026d0:	08002707 	.word	0x08002707
 80026d4:	0800273d 	.word	0x0800273d
 80026d8:	0800273d 	.word	0x0800273d
 80026dc:	0800273d 	.word	0x0800273d
 80026e0:	08002719 	.word	0x08002719
 80026e4:	0800273d 	.word	0x0800273d
 80026e8:	0800273d 	.word	0x0800273d
 80026ec:	0800273d 	.word	0x0800273d
 80026f0:	0800272b 	.word	0x0800272b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0202 	orr.w	r2, r2, #2
 8002702:	60da      	str	r2, [r3, #12]
      break;
 8002704:	e01b      	b.n	800273e <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0204 	orr.w	r2, r2, #4
 8002714:	60da      	str	r2, [r3, #12]
      break;
 8002716:	e012      	b.n	800273e <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0208 	orr.w	r2, r2, #8
 8002726:	60da      	str	r2, [r3, #12]
      break;
 8002728:	e009      	b.n	800273e <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0210 	orr.w	r2, r2, #16
 8002738:	60da      	str	r2, [r3, #12]
      break;
 800273a:	e000      	b.n	800273e <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 800273c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2201      	movs	r2, #1
 8002744:	6839      	ldr	r1, [r7, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f000 feca 	bl	80034e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a2b      	ldr	r2, [pc, #172]	; (8002800 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00e      	beq.n	8002774 <HAL_TIM_PWM_Start_IT+0x16c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a2a      	ldr	r2, [pc, #168]	; (8002804 <HAL_TIM_PWM_Start_IT+0x1fc>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d009      	beq.n	8002774 <HAL_TIM_PWM_Start_IT+0x16c>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a28      	ldr	r2, [pc, #160]	; (8002808 <HAL_TIM_PWM_Start_IT+0x200>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d004      	beq.n	8002774 <HAL_TIM_PWM_Start_IT+0x16c>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a27      	ldr	r2, [pc, #156]	; (800280c <HAL_TIM_PWM_Start_IT+0x204>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d101      	bne.n	8002778 <HAL_TIM_PWM_Start_IT+0x170>
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <HAL_TIM_PWM_Start_IT+0x172>
 8002778:	2300      	movs	r3, #0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <HAL_TIM_PWM_Start_IT+0x186>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800278c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a1b      	ldr	r2, [pc, #108]	; (8002800 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d013      	beq.n	80027c0 <HAL_TIM_PWM_Start_IT+0x1b8>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a0:	d00e      	beq.n	80027c0 <HAL_TIM_PWM_Start_IT+0x1b8>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a1a      	ldr	r2, [pc, #104]	; (8002810 <HAL_TIM_PWM_Start_IT+0x208>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d009      	beq.n	80027c0 <HAL_TIM_PWM_Start_IT+0x1b8>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a18      	ldr	r2, [pc, #96]	; (8002814 <HAL_TIM_PWM_Start_IT+0x20c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d004      	beq.n	80027c0 <HAL_TIM_PWM_Start_IT+0x1b8>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a12      	ldr	r2, [pc, #72]	; (8002804 <HAL_TIM_PWM_Start_IT+0x1fc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d111      	bne.n	80027e4 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b06      	cmp	r3, #6
 80027d0:	d010      	beq.n	80027f4 <HAL_TIM_PWM_Start_IT+0x1ec>
    {
      __HAL_TIM_ENABLE(htim);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f042 0201 	orr.w	r2, r2, #1
 80027e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e2:	e007      	b.n	80027f4 <HAL_TIM_PWM_Start_IT+0x1ec>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40012c00 	.word	0x40012c00
 8002804:	40014000 	.word	0x40014000
 8002808:	40014400 	.word	0x40014400
 800280c:	40014800 	.word	0x40014800
 8002810:	40000400 	.word	0x40000400
 8002814:	40000800 	.word	0x40000800

08002818 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b0c      	cmp	r3, #12
 8002826:	d841      	bhi.n	80028ac <HAL_TIM_PWM_Stop_IT+0x94>
 8002828:	a201      	add	r2, pc, #4	; (adr r2, 8002830 <HAL_TIM_PWM_Stop_IT+0x18>)
 800282a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282e:	bf00      	nop
 8002830:	08002865 	.word	0x08002865
 8002834:	080028ad 	.word	0x080028ad
 8002838:	080028ad 	.word	0x080028ad
 800283c:	080028ad 	.word	0x080028ad
 8002840:	08002877 	.word	0x08002877
 8002844:	080028ad 	.word	0x080028ad
 8002848:	080028ad 	.word	0x080028ad
 800284c:	080028ad 	.word	0x080028ad
 8002850:	08002889 	.word	0x08002889
 8002854:	080028ad 	.word	0x080028ad
 8002858:	080028ad 	.word	0x080028ad
 800285c:	080028ad 	.word	0x080028ad
 8002860:	0800289b 	.word	0x0800289b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0202 	bic.w	r2, r2, #2
 8002872:	60da      	str	r2, [r3, #12]
      break;
 8002874:	e01b      	b.n	80028ae <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0204 	bic.w	r2, r2, #4
 8002884:	60da      	str	r2, [r3, #12]
      break;
 8002886:	e012      	b.n	80028ae <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0208 	bic.w	r2, r2, #8
 8002896:	60da      	str	r2, [r3, #12]
      break;
 8002898:	e009      	b.n	80028ae <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0210 	bic.w	r2, r2, #16
 80028a8:	60da      	str	r2, [r3, #12]
      break;
 80028aa:	e000      	b.n	80028ae <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 80028ac:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2200      	movs	r2, #0
 80028b4:	6839      	ldr	r1, [r7, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fe12 	bl	80034e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a33      	ldr	r2, [pc, #204]	; (8002990 <HAL_TIM_PWM_Stop_IT+0x178>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d00e      	beq.n	80028e4 <HAL_TIM_PWM_Stop_IT+0xcc>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a32      	ldr	r2, [pc, #200]	; (8002994 <HAL_TIM_PWM_Stop_IT+0x17c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d009      	beq.n	80028e4 <HAL_TIM_PWM_Stop_IT+0xcc>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a30      	ldr	r2, [pc, #192]	; (8002998 <HAL_TIM_PWM_Stop_IT+0x180>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d004      	beq.n	80028e4 <HAL_TIM_PWM_Stop_IT+0xcc>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a2f      	ldr	r2, [pc, #188]	; (800299c <HAL_TIM_PWM_Stop_IT+0x184>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d101      	bne.n	80028e8 <HAL_TIM_PWM_Stop_IT+0xd0>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <HAL_TIM_PWM_Stop_IT+0xd2>
 80028e8:	2300      	movs	r3, #0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d017      	beq.n	800291e <HAL_TIM_PWM_Stop_IT+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6a1a      	ldr	r2, [r3, #32]
 80028f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10f      	bne.n	800291e <HAL_TIM_PWM_Stop_IT+0x106>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6a1a      	ldr	r2, [r3, #32]
 8002904:	f240 4344 	movw	r3, #1092	; 0x444
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d107      	bne.n	800291e <HAL_TIM_PWM_Stop_IT+0x106>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800291c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6a1a      	ldr	r2, [r3, #32]
 8002924:	f241 1311 	movw	r3, #4369	; 0x1111
 8002928:	4013      	ands	r3, r2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10f      	bne.n	800294e <HAL_TIM_PWM_Stop_IT+0x136>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6a1a      	ldr	r2, [r3, #32]
 8002934:	f240 4344 	movw	r3, #1092	; 0x444
 8002938:	4013      	ands	r3, r2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d107      	bne.n	800294e <HAL_TIM_PWM_Stop_IT+0x136>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0201 	bic.w	r2, r2, #1
 800294c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d104      	bne.n	800295e <HAL_TIM_PWM_Stop_IT+0x146>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800295c:	e013      	b.n	8002986 <HAL_TIM_PWM_Stop_IT+0x16e>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b04      	cmp	r3, #4
 8002962:	d104      	bne.n	800296e <HAL_TIM_PWM_Stop_IT+0x156>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800296c:	e00b      	b.n	8002986 <HAL_TIM_PWM_Stop_IT+0x16e>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b08      	cmp	r3, #8
 8002972:	d104      	bne.n	800297e <HAL_TIM_PWM_Stop_IT+0x166>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800297c:	e003      	b.n	8002986 <HAL_TIM_PWM_Stop_IT+0x16e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40012c00 	.word	0x40012c00
 8002994:	40014000 	.word	0x40014000
 8002998:	40014400 	.word	0x40014400
 800299c:	40014800 	.word	0x40014800

080029a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d122      	bne.n	80029fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d11b      	bne.n	80029fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0202 	mvn.w	r2, #2
 80029cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 fa78 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
 80029e8:	e005      	b.n	80029f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fa6b 	bl	8002ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7fe fa8b 	bl	8000f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d122      	bne.n	8002a50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d11b      	bne.n	8002a50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f06f 0204 	mvn.w	r2, #4
 8002a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2202      	movs	r2, #2
 8002a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fa4e 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
 8002a3c:	e005      	b.n	8002a4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fa41 	bl	8002ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7fe fa61 	bl	8000f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d122      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d11b      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0208 	mvn.w	r2, #8
 8002a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2204      	movs	r2, #4
 8002a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fa24 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
 8002a90:	e005      	b.n	8002a9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fa17 	bl	8002ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7fe fa37 	bl	8000f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b10      	cmp	r3, #16
 8002ab0:	d122      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0310 	and.w	r3, r3, #16
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d11b      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0210 	mvn.w	r2, #16
 8002ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2208      	movs	r2, #8
 8002ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f9fa 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
 8002ae4:	e005      	b.n	8002af2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f9ed 	bl	8002ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7fe fa0d 	bl	8000f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d10e      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d107      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0201 	mvn.w	r2, #1
 8002b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f9c8 	bl	8002eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2e:	2b80      	cmp	r3, #128	; 0x80
 8002b30:	d10e      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3c:	2b80      	cmp	r3, #128	; 0x80
 8002b3e:	d107      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fd5b 	bl	8003606 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	2b40      	cmp	r3, #64	; 0x40
 8002b5c:	d10e      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d107      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f9b7 	bl	8002eea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	d10e      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d107      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0220 	mvn.w	r2, #32
 8002ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fd26 	bl	80035f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e0ac      	b.n	8002d24 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b0c      	cmp	r3, #12
 8002bd6:	f200 809f 	bhi.w	8002d18 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002bda:	a201      	add	r2, pc, #4	; (adr r2, 8002be0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be0:	08002c15 	.word	0x08002c15
 8002be4:	08002d19 	.word	0x08002d19
 8002be8:	08002d19 	.word	0x08002d19
 8002bec:	08002d19 	.word	0x08002d19
 8002bf0:	08002c55 	.word	0x08002c55
 8002bf4:	08002d19 	.word	0x08002d19
 8002bf8:	08002d19 	.word	0x08002d19
 8002bfc:	08002d19 	.word	0x08002d19
 8002c00:	08002c97 	.word	0x08002c97
 8002c04:	08002d19 	.word	0x08002d19
 8002c08:	08002d19 	.word	0x08002d19
 8002c0c:	08002d19 	.word	0x08002d19
 8002c10:	08002cd7 	.word	0x08002cd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f9ee 	bl	8002ffc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0208 	orr.w	r2, r2, #8
 8002c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699a      	ldr	r2, [r3, #24]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0204 	bic.w	r2, r2, #4
 8002c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6999      	ldr	r1, [r3, #24]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	619a      	str	r2, [r3, #24]
      break;
 8002c52:	e062      	b.n	8002d1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fa52 	bl	8003104 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699a      	ldr	r2, [r3, #24]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699a      	ldr	r2, [r3, #24]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6999      	ldr	r1, [r3, #24]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	021a      	lsls	r2, r3, #8
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	619a      	str	r2, [r3, #24]
      break;
 8002c94:	e041      	b.n	8002d1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68b9      	ldr	r1, [r7, #8]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 faad 	bl	80031fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69da      	ldr	r2, [r3, #28]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f042 0208 	orr.w	r2, r2, #8
 8002cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69da      	ldr	r2, [r3, #28]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0204 	bic.w	r2, r2, #4
 8002cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69d9      	ldr	r1, [r3, #28]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	61da      	str	r2, [r3, #28]
      break;
 8002cd4:	e021      	b.n	8002d1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68b9      	ldr	r1, [r7, #8]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 fb09 	bl	80032f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69da      	ldr	r2, [r3, #28]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	69da      	ldr	r2, [r3, #28]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	69d9      	ldr	r1, [r3, #28]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	021a      	lsls	r2, r3, #8
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	61da      	str	r2, [r3, #28]
      break;
 8002d16:	e000      	b.n	8002d1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002d18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_TIM_ConfigClockSource+0x18>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e0b3      	b.n	8002eac <HAL_TIM_ConfigClockSource+0x180>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d7c:	d03e      	beq.n	8002dfc <HAL_TIM_ConfigClockSource+0xd0>
 8002d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d82:	f200 8087 	bhi.w	8002e94 <HAL_TIM_ConfigClockSource+0x168>
 8002d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d8a:	f000 8085 	beq.w	8002e98 <HAL_TIM_ConfigClockSource+0x16c>
 8002d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d92:	d87f      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x168>
 8002d94:	2b70      	cmp	r3, #112	; 0x70
 8002d96:	d01a      	beq.n	8002dce <HAL_TIM_ConfigClockSource+0xa2>
 8002d98:	2b70      	cmp	r3, #112	; 0x70
 8002d9a:	d87b      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x168>
 8002d9c:	2b60      	cmp	r3, #96	; 0x60
 8002d9e:	d050      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0x116>
 8002da0:	2b60      	cmp	r3, #96	; 0x60
 8002da2:	d877      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x168>
 8002da4:	2b50      	cmp	r3, #80	; 0x50
 8002da6:	d03c      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0xf6>
 8002da8:	2b50      	cmp	r3, #80	; 0x50
 8002daa:	d873      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x168>
 8002dac:	2b40      	cmp	r3, #64	; 0x40
 8002dae:	d058      	beq.n	8002e62 <HAL_TIM_ConfigClockSource+0x136>
 8002db0:	2b40      	cmp	r3, #64	; 0x40
 8002db2:	d86f      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x168>
 8002db4:	2b30      	cmp	r3, #48	; 0x30
 8002db6:	d064      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0x156>
 8002db8:	2b30      	cmp	r3, #48	; 0x30
 8002dba:	d86b      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x168>
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d060      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0x156>
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d867      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x168>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d05c      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0x156>
 8002dc8:	2b10      	cmp	r3, #16
 8002dca:	d05a      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002dcc:	e062      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6818      	ldr	r0, [r3, #0]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	6899      	ldr	r1, [r3, #8]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f000 fb60 	bl	80034a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002df0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	609a      	str	r2, [r3, #8]
      break;
 8002dfa:	e04e      	b.n	8002e9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6899      	ldr	r1, [r3, #8]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f000 fb49 	bl	80034a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e1e:	609a      	str	r2, [r3, #8]
      break;
 8002e20:	e03b      	b.n	8002e9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	6859      	ldr	r1, [r3, #4]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	f000 fac0 	bl	80033b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2150      	movs	r1, #80	; 0x50
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fb17 	bl	800346e <TIM_ITRx_SetConfig>
      break;
 8002e40:	e02b      	b.n	8002e9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	6859      	ldr	r1, [r3, #4]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f000 fade 	bl	8003410 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2160      	movs	r1, #96	; 0x60
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fb07 	bl	800346e <TIM_ITRx_SetConfig>
      break;
 8002e60:	e01b      	b.n	8002e9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	6859      	ldr	r1, [r3, #4]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f000 faa0 	bl	80033b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2140      	movs	r1, #64	; 0x40
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 faf7 	bl	800346e <TIM_ITRx_SetConfig>
      break;
 8002e80:	e00b      	b.n	8002e9a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	f000 faee 	bl	800346e <TIM_ITRx_SetConfig>
        break;
 8002e92:	e002      	b.n	8002e9a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e94:	bf00      	nop
 8002e96:	e000      	b.n	8002e9a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr

08002eea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr

08002efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a35      	ldr	r2, [pc, #212]	; (8002fe4 <TIM_Base_SetConfig+0xe8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d00b      	beq.n	8002f2c <TIM_Base_SetConfig+0x30>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1a:	d007      	beq.n	8002f2c <TIM_Base_SetConfig+0x30>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a32      	ldr	r2, [pc, #200]	; (8002fe8 <TIM_Base_SetConfig+0xec>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d003      	beq.n	8002f2c <TIM_Base_SetConfig+0x30>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a31      	ldr	r2, [pc, #196]	; (8002fec <TIM_Base_SetConfig+0xf0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d108      	bne.n	8002f3e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a28      	ldr	r2, [pc, #160]	; (8002fe4 <TIM_Base_SetConfig+0xe8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d017      	beq.n	8002f76 <TIM_Base_SetConfig+0x7a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4c:	d013      	beq.n	8002f76 <TIM_Base_SetConfig+0x7a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a25      	ldr	r2, [pc, #148]	; (8002fe8 <TIM_Base_SetConfig+0xec>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00f      	beq.n	8002f76 <TIM_Base_SetConfig+0x7a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a24      	ldr	r2, [pc, #144]	; (8002fec <TIM_Base_SetConfig+0xf0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00b      	beq.n	8002f76 <TIM_Base_SetConfig+0x7a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a23      	ldr	r2, [pc, #140]	; (8002ff0 <TIM_Base_SetConfig+0xf4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d007      	beq.n	8002f76 <TIM_Base_SetConfig+0x7a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a22      	ldr	r2, [pc, #136]	; (8002ff4 <TIM_Base_SetConfig+0xf8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d003      	beq.n	8002f76 <TIM_Base_SetConfig+0x7a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a21      	ldr	r2, [pc, #132]	; (8002ff8 <TIM_Base_SetConfig+0xfc>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d108      	bne.n	8002f88 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a0d      	ldr	r2, [pc, #52]	; (8002fe4 <TIM_Base_SetConfig+0xe8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00b      	beq.n	8002fcc <TIM_Base_SetConfig+0xd0>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a0e      	ldr	r2, [pc, #56]	; (8002ff0 <TIM_Base_SetConfig+0xf4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d007      	beq.n	8002fcc <TIM_Base_SetConfig+0xd0>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a0d      	ldr	r2, [pc, #52]	; (8002ff4 <TIM_Base_SetConfig+0xf8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d003      	beq.n	8002fcc <TIM_Base_SetConfig+0xd0>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a0c      	ldr	r2, [pc, #48]	; (8002ff8 <TIM_Base_SetConfig+0xfc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d103      	bne.n	8002fd4 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	615a      	str	r2, [r3, #20]
}
 8002fda:	bf00      	nop
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr
 8002fe4:	40012c00 	.word	0x40012c00
 8002fe8:	40000400 	.word	0x40000400
 8002fec:	40000800 	.word	0x40000800
 8002ff0:	40014000 	.word	0x40014000
 8002ff4:	40014400 	.word	0x40014400
 8002ff8:	40014800 	.word	0x40014800

08002ffc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f023 0201 	bic.w	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0303 	bic.w	r3, r3, #3
 8003032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f023 0302 	bic.w	r3, r3, #2
 8003044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4313      	orrs	r3, r2
 800304e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a28      	ldr	r2, [pc, #160]	; (80030f4 <TIM_OC1_SetConfig+0xf8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00b      	beq.n	8003070 <TIM_OC1_SetConfig+0x74>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a27      	ldr	r2, [pc, #156]	; (80030f8 <TIM_OC1_SetConfig+0xfc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d007      	beq.n	8003070 <TIM_OC1_SetConfig+0x74>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a26      	ldr	r2, [pc, #152]	; (80030fc <TIM_OC1_SetConfig+0x100>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d003      	beq.n	8003070 <TIM_OC1_SetConfig+0x74>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a25      	ldr	r2, [pc, #148]	; (8003100 <TIM_OC1_SetConfig+0x104>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d10c      	bne.n	800308a <TIM_OC1_SetConfig+0x8e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f023 0308 	bic.w	r3, r3, #8
 8003076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	4313      	orrs	r3, r2
 8003080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f023 0304 	bic.w	r3, r3, #4
 8003088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a19      	ldr	r2, [pc, #100]	; (80030f4 <TIM_OC1_SetConfig+0xf8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00b      	beq.n	80030aa <TIM_OC1_SetConfig+0xae>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a18      	ldr	r2, [pc, #96]	; (80030f8 <TIM_OC1_SetConfig+0xfc>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d007      	beq.n	80030aa <TIM_OC1_SetConfig+0xae>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a17      	ldr	r2, [pc, #92]	; (80030fc <TIM_OC1_SetConfig+0x100>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d003      	beq.n	80030aa <TIM_OC1_SetConfig+0xae>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a16      	ldr	r2, [pc, #88]	; (8003100 <TIM_OC1_SetConfig+0x104>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d111      	bne.n	80030ce <TIM_OC1_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	621a      	str	r2, [r3, #32]
}
 80030e8:	bf00      	nop
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40012c00 	.word	0x40012c00
 80030f8:	40014000 	.word	0x40014000
 80030fc:	40014400 	.word	0x40014400
 8003100:	40014800 	.word	0x40014800

08003104 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	f023 0210 	bic.w	r2, r3, #16
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800313a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4313      	orrs	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f023 0320 	bic.w	r3, r3, #32
 800314e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	4313      	orrs	r3, r2
 800315a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a23      	ldr	r2, [pc, #140]	; (80031ec <TIM_OC2_SetConfig+0xe8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d10d      	bne.n	8003180 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800316a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800317e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a1a      	ldr	r2, [pc, #104]	; (80031ec <TIM_OC2_SetConfig+0xe8>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d00b      	beq.n	80031a0 <TIM_OC2_SetConfig+0x9c>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a19      	ldr	r2, [pc, #100]	; (80031f0 <TIM_OC2_SetConfig+0xec>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d007      	beq.n	80031a0 <TIM_OC2_SetConfig+0x9c>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a18      	ldr	r2, [pc, #96]	; (80031f4 <TIM_OC2_SetConfig+0xf0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d003      	beq.n	80031a0 <TIM_OC2_SetConfig+0x9c>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a17      	ldr	r2, [pc, #92]	; (80031f8 <TIM_OC2_SetConfig+0xf4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d113      	bne.n	80031c8 <TIM_OC2_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	621a      	str	r2, [r3, #32]
}
 80031e2:	bf00      	nop
 80031e4:	371c      	adds	r7, #28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr
 80031ec:	40012c00 	.word	0x40012c00
 80031f0:	40014000 	.word	0x40014000
 80031f4:	40014400 	.word	0x40014400
 80031f8:	40014800 	.word	0x40014800

080031fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0303 	bic.w	r3, r3, #3
 8003232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a23      	ldr	r2, [pc, #140]	; (80032e4 <TIM_OC3_SetConfig+0xe8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d10d      	bne.n	8003276 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003260:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	021b      	lsls	r3, r3, #8
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	4313      	orrs	r3, r2
 800326c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a1a      	ldr	r2, [pc, #104]	; (80032e4 <TIM_OC3_SetConfig+0xe8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00b      	beq.n	8003296 <TIM_OC3_SetConfig+0x9a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a19      	ldr	r2, [pc, #100]	; (80032e8 <TIM_OC3_SetConfig+0xec>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d007      	beq.n	8003296 <TIM_OC3_SetConfig+0x9a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a18      	ldr	r2, [pc, #96]	; (80032ec <TIM_OC3_SetConfig+0xf0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d003      	beq.n	8003296 <TIM_OC3_SetConfig+0x9a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a17      	ldr	r2, [pc, #92]	; (80032f0 <TIM_OC3_SetConfig+0xf4>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d113      	bne.n	80032be <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800329c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	621a      	str	r2, [r3, #32]
}
 80032d8:	bf00      	nop
 80032da:	371c      	adds	r7, #28
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40012c00 	.word	0x40012c00
 80032e8:	40014000 	.word	0x40014000
 80032ec:	40014400 	.word	0x40014400
 80032f0:	40014800 	.word	0x40014800

080032f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800332a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	021b      	lsls	r3, r3, #8
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4313      	orrs	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800333e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	031b      	lsls	r3, r3, #12
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a15      	ldr	r2, [pc, #84]	; (80033a4 <TIM_OC4_SetConfig+0xb0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00b      	beq.n	800336c <TIM_OC4_SetConfig+0x78>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a14      	ldr	r2, [pc, #80]	; (80033a8 <TIM_OC4_SetConfig+0xb4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d007      	beq.n	800336c <TIM_OC4_SetConfig+0x78>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a13      	ldr	r2, [pc, #76]	; (80033ac <TIM_OC4_SetConfig+0xb8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d003      	beq.n	800336c <TIM_OC4_SetConfig+0x78>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a12      	ldr	r2, [pc, #72]	; (80033b0 <TIM_OC4_SetConfig+0xbc>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d109      	bne.n	8003380 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003372:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	019b      	lsls	r3, r3, #6
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	621a      	str	r2, [r3, #32]
}
 800339a:	bf00      	nop
 800339c:	371c      	adds	r7, #28
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr
 80033a4:	40012c00 	.word	0x40012c00
 80033a8:	40014000 	.word	0x40014000
 80033ac:	40014400 	.word	0x40014400
 80033b0:	40014800 	.word	0x40014800

080033b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	f023 0201 	bic.w	r2, r3, #1
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f023 030a 	bic.w	r3, r3, #10
 80033f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	621a      	str	r2, [r3, #32]
}
 8003406:	bf00      	nop
 8003408:	371c      	adds	r7, #28
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr

08003410 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	f023 0210 	bic.w	r2, r3, #16
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800343a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	031b      	lsls	r3, r3, #12
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800344c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	621a      	str	r2, [r3, #32]
}
 8003464:	bf00      	nop
 8003466:	371c      	adds	r7, #28
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr

0800346e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800346e:	b480      	push	{r7}
 8003470:	b085      	sub	sp, #20
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003484:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	f043 0307 	orr.w	r3, r3, #7
 8003490:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	609a      	str	r2, [r3, #8]
}
 8003498:	bf00      	nop
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr

080034a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b087      	sub	sp, #28
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	021a      	lsls	r2, r3, #8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	431a      	orrs	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	609a      	str	r2, [r3, #8]
}
 80034d6:	bf00      	nop
 80034d8:	371c      	adds	r7, #28
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr

080034e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b087      	sub	sp, #28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f003 031f 	and.w	r3, r3, #31
 80034f2:	2201      	movs	r2, #1
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a1a      	ldr	r2, [r3, #32]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	43db      	mvns	r3, r3
 8003502:	401a      	ands	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a1a      	ldr	r2, [r3, #32]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f003 031f 	and.w	r3, r3, #31
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	fa01 f303 	lsl.w	r3, r1, r3
 8003518:	431a      	orrs	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	621a      	str	r2, [r3, #32]
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800353c:	2302      	movs	r3, #2
 800353e:	e04b      	b.n	80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a19      	ldr	r2, [pc, #100]	; (80035e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d013      	beq.n	80035ac <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358c:	d00e      	beq.n	80035ac <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d009      	beq.n	80035ac <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a13      	ldr	r2, [pc, #76]	; (80035ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d004      	beq.n	80035ac <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a12      	ldr	r2, [pc, #72]	; (80035f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d10c      	bne.n	80035c6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40012c00 	.word	0x40012c00
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000800 	.word	0x40000800
 80035f0:	40014000 	.word	0x40014000

080035f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr

08003606 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e03f      	b.n	80036aa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fd fdac 	bl	800119c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2224      	movs	r2, #36	; 0x24
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800365a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f829 	bl	80036b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003670:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695a      	ldr	r2, [r3, #20]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003680:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003690:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80036f4:	f023 030c 	bic.w	r3, r3, #12
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	430b      	orrs	r3, r1
 8003700:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699a      	ldr	r2, [r3, #24]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a55      	ldr	r2, [pc, #340]	; (8003874 <UART_SetConfig+0x1c0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d103      	bne.n	800372a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003722:	f7fe fe97 	bl	8002454 <HAL_RCC_GetPCLK2Freq>
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	e002      	b.n	8003730 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800372a:	f7fe fe7f 	bl	800242c <HAL_RCC_GetPCLK1Freq>
 800372e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003738:	d14c      	bne.n	80037d4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	009a      	lsls	r2, r3, #2
 8003744:	441a      	add	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003750:	4a49      	ldr	r2, [pc, #292]	; (8003878 <UART_SetConfig+0x1c4>)
 8003752:	fba2 2303 	umull	r2, r3, r2, r3
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	0119      	lsls	r1, r3, #4
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	009a      	lsls	r2, r3, #2
 8003764:	441a      	add	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003770:	4b41      	ldr	r3, [pc, #260]	; (8003878 <UART_SetConfig+0x1c4>)
 8003772:	fba3 0302 	umull	r0, r3, r3, r2
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	2064      	movs	r0, #100	; 0x64
 800377a:	fb00 f303 	mul.w	r3, r0, r3
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	3332      	adds	r3, #50	; 0x32
 8003784:	4a3c      	ldr	r2, [pc, #240]	; (8003878 <UART_SetConfig+0x1c4>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003792:	4419      	add	r1, r3
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	009a      	lsls	r2, r3, #2
 800379e:	441a      	add	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80037aa:	4b33      	ldr	r3, [pc, #204]	; (8003878 <UART_SetConfig+0x1c4>)
 80037ac:	fba3 0302 	umull	r0, r3, r3, r2
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	2064      	movs	r0, #100	; 0x64
 80037b4:	fb00 f303 	mul.w	r3, r0, r3
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	3332      	adds	r3, #50	; 0x32
 80037be:	4a2e      	ldr	r2, [pc, #184]	; (8003878 <UART_SetConfig+0x1c4>)
 80037c0:	fba2 2303 	umull	r2, r3, r2, r3
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	f003 0207 	and.w	r2, r3, #7
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	440a      	add	r2, r1
 80037d0:	609a      	str	r2, [r3, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 80037d2:	e04a      	b.n	800386a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	009a      	lsls	r2, r3, #2
 80037de:	441a      	add	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ea:	4a23      	ldr	r2, [pc, #140]	; (8003878 <UART_SetConfig+0x1c4>)
 80037ec:	fba2 2303 	umull	r2, r3, r2, r3
 80037f0:	095b      	lsrs	r3, r3, #5
 80037f2:	0119      	lsls	r1, r3, #4
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	009a      	lsls	r2, r3, #2
 80037fe:	441a      	add	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	fbb2 f2f3 	udiv	r2, r2, r3
 800380a:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <UART_SetConfig+0x1c4>)
 800380c:	fba3 0302 	umull	r0, r3, r3, r2
 8003810:	095b      	lsrs	r3, r3, #5
 8003812:	2064      	movs	r0, #100	; 0x64
 8003814:	fb00 f303 	mul.w	r3, r0, r3
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	3332      	adds	r3, #50	; 0x32
 800381e:	4a16      	ldr	r2, [pc, #88]	; (8003878 <UART_SetConfig+0x1c4>)
 8003820:	fba2 2303 	umull	r2, r3, r2, r3
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800382a:	4419      	add	r1, r3
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	009a      	lsls	r2, r3, #2
 8003836:	441a      	add	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003842:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <UART_SetConfig+0x1c4>)
 8003844:	fba3 0302 	umull	r0, r3, r3, r2
 8003848:	095b      	lsrs	r3, r3, #5
 800384a:	2064      	movs	r0, #100	; 0x64
 800384c:	fb00 f303 	mul.w	r3, r0, r3
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	3332      	adds	r3, #50	; 0x32
 8003856:	4a08      	ldr	r2, [pc, #32]	; (8003878 <UART_SetConfig+0x1c4>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	095b      	lsrs	r3, r3, #5
 800385e:	f003 020f 	and.w	r2, r3, #15
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	440a      	add	r2, r1
 8003868:	609a      	str	r2, [r3, #8]
}
 800386a:	bf00      	nop
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40013800 	.word	0x40013800
 8003878:	51eb851f 	.word	0x51eb851f

0800387c <__libc_init_array>:
 800387c:	b570      	push	{r4, r5, r6, lr}
 800387e:	2600      	movs	r6, #0
 8003880:	4d0c      	ldr	r5, [pc, #48]	; (80038b4 <__libc_init_array+0x38>)
 8003882:	4c0d      	ldr	r4, [pc, #52]	; (80038b8 <__libc_init_array+0x3c>)
 8003884:	1b64      	subs	r4, r4, r5
 8003886:	10a4      	asrs	r4, r4, #2
 8003888:	42a6      	cmp	r6, r4
 800388a:	d109      	bne.n	80038a0 <__libc_init_array+0x24>
 800388c:	f000 f822 	bl	80038d4 <_init>
 8003890:	2600      	movs	r6, #0
 8003892:	4d0a      	ldr	r5, [pc, #40]	; (80038bc <__libc_init_array+0x40>)
 8003894:	4c0a      	ldr	r4, [pc, #40]	; (80038c0 <__libc_init_array+0x44>)
 8003896:	1b64      	subs	r4, r4, r5
 8003898:	10a4      	asrs	r4, r4, #2
 800389a:	42a6      	cmp	r6, r4
 800389c:	d105      	bne.n	80038aa <__libc_init_array+0x2e>
 800389e:	bd70      	pop	{r4, r5, r6, pc}
 80038a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a4:	4798      	blx	r3
 80038a6:	3601      	adds	r6, #1
 80038a8:	e7ee      	b.n	8003888 <__libc_init_array+0xc>
 80038aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ae:	4798      	blx	r3
 80038b0:	3601      	adds	r6, #1
 80038b2:	e7f2      	b.n	800389a <__libc_init_array+0x1e>
 80038b4:	08003924 	.word	0x08003924
 80038b8:	08003924 	.word	0x08003924
 80038bc:	08003924 	.word	0x08003924
 80038c0:	08003928 	.word	0x08003928

080038c4 <memset>:
 80038c4:	4603      	mov	r3, r0
 80038c6:	4402      	add	r2, r0
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d100      	bne.n	80038ce <memset+0xa>
 80038cc:	4770      	bx	lr
 80038ce:	f803 1b01 	strb.w	r1, [r3], #1
 80038d2:	e7f9      	b.n	80038c8 <memset+0x4>

080038d4 <_init>:
 80038d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d6:	bf00      	nop
 80038d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038da:	bc08      	pop	{r3}
 80038dc:	469e      	mov	lr, r3
 80038de:	4770      	bx	lr

080038e0 <_fini>:
 80038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e2:	bf00      	nop
 80038e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e6:	bc08      	pop	{r3}
 80038e8:	469e      	mov	lr, r3
 80038ea:	4770      	bx	lr
